class HLScientistWandererSpawner : RandomSpawner
{
	Default
	{
		+FRIENDLY
		DropItem "HLScientist1Path";
		DropItem "HLScientist2Path";
		DropItem "HLScientist3Path";
		DropItem "HLScientist4Path";
	}
	override void PostSpawn(Actor spawned)
	{
		let me=HLScientist1Path(spawned);
		me.wanderer=1;
	}
}

class HLScientistImmovilSpawner : HLScientistWandererSpawner
{
	override void PostSpawn(Actor spawned)
	{
		let me=HLScientist1Path(spawned);
		me.still=1;
	}
}

//**************************************************************************
//**************************************************************************

class HLScientist1Path : HLMonster
{
	bool wanderer,still;
	int limit,limit2,boredom,stay,panic;
	Property Limits:limit,limit2;
	override bool Used(Actor user)
	{
		boredom=0;
		return false;
	}
	Default
	{
		Health 25;
		GibHealth -100;
		Speed 1.666667;
		Height 56;
		PainChance 255;
		+FRIENDLY
		-CANUSEWALLS
		-COUNTKILL
		SeeSound "halflife/monsters/scientist/sight";
		PainSound "halflife/monsters/scientist/pain";
		DeathSound "halflife/monsters/scientist/death";
		HLScientist1Path.Limits 35,30;
		Species "HLScientist";
	}
	States
	{
	Spawn:
		HLI1 A 0 NODELAY
		{
			if(wanderer)
				return ResolveState("See");
			if(!still)
				boredom=1;
			return State(null);
		}
	Pondering:
		HLI1 A 0 {self.frame=random(0,2);}
		HLI1 # 5
		{
			if(wanderer)
			{
				A_SetTics(15);
				Chatter(4);
				if(random(0,255<6))
					return ResolveState("See");
			}
			if(still)
			{
				A_SetTics(10);
				Chatter(2);
			}
			else
			{
				if(stay>=80)
				{
					stay=0;
					if(random(0,1))
					{
						boredom=0;
						return ResolveState("See");
					}
					return State(null);
				}
				stay++;
				if(!boredom)
				{
					A_PlaySound("scientist/randomphrase");
					return ResolveState("See");
				}
				Chatter(2);
			}
			return state(null);
		}
		Wait;
	See:
		TNT1 A 0
		{
			if(bFRIGHTENED)//scream the 1st time they enter here
			{
				A_PlaySound("halflife/monsters/scientist/sight");
				return ResolveState("SeeDecidePanic");
			}
			if(still)
				return ResolveState("Pondering");
			A_SetSpeed(5.0/3.0);
			return state(null);
		}
	Wandering:
		HLW1 AABBCCDDEEFFGGHHIIJJKKLLMMNNOOPP 1
		{
			if(boredom)
				return ResolveState("Spawn");
			A_Chase();
			return state(null);
		}
		HLW1 A 0
		{
			if(wanderer&&random(0,255)<32)
				return ResolveState("Pondering");
			return state(null);
		}
		Loop;
	Panic:
		TNT1 A 0
		{
			A_ClearTarget();
			bFRIGHTENED=1;
			if(random(0,1))
				return ResolveState("WanderRunStartPanic");
			return state(null);
		}
	WanderPanic:
		HLW1 A 0 A_SetSpeed(5.0/3.0);
		HLW1 AABBCC 1 A_Chase;
		HLW1 D 0 A_Look;
		HLW1 DDEEFF 1 A_Chase;
		HLW1 G 0 A_Look;
		HLW1 GGHHII 1 A_Chase;
		HLW1 J 0 A_Look;
		HLW1 JJKKLL 1 A_Chase;
		HLW1 M 0 A_Look;
		HLW1 MMNNOOPP 1 A_Chase;
		HLW1 A 0 A_Look;
		HLW1 A 0	//how often they'll say something while moving
		{
			if(random(0,255)<8)
			{
				A_PlaySound("scientist/panic");
				return ResolveState("WanderPanic");
			}
			if(random(0,255)<4)
			{
				if(random(0,255)<235)
					return ResolveState("IdleRegPanic");	//stopmov, ironically also randomly starts the run seq
				return ResolveState("WanderRunStartPanic");	//kind of rare to see them running just because of nothing.
			}
			return state(null);
		}
		Loop;
	IdleRegPanic:
		TNT1 A 0
		{
			if(random(0,255)<3)
				A_PlaySound("scientist/panic");
		}
		HLI1 AAA 5 A_Look;
		HLI1 A 0 A_Jump(5,"WanderPanic");
		Loop;
	SeeDecidePanic:		//decide if they calm down or not
		HLR1 A 0 A_JumpIf(panic>=limit,"SeeCalmDownPanic");
	SeeLoopPanic:
		HLR1 A 0 A_SetSpeed(5);
		HLR1 ABCDEFGHIJKLMNOPQRS 1 A_Chase;
		HLR1 A 0
		{
			panic++;
			if(random(0,255)<4)//every once in a while it will say something
			{
				A_PlaySound("halflife/monsters/scientist/sight");
				return ResolveState("SeeLoopPanic");
			}
			return state(null);
		}
		Goto SeeDecidePanic;
	SeeCalmDownPanic:
		TNT1 A 0
		{
			panic-=8;	//If decides to go running again, will last a bit more
			if(random(0,255)<160)
				return ResolveState("WanderRunPanic");
			panic=0;
			A_ClearTarget();
			return ResolveState("WanderPanic");
		}
	WanderRunStartPanic:		//scream the 1st time they enter here
		TNT1 A 0 A_PlaySound("halflife/monsters/scientist/sight");
	WanderRunDecidePanic:	//decide if they calm down or not
		TNT1 A 0
		{
			if(panic>=limit)
			{
				panic-=8;	//If decides to go running again, will last a bit more
				if(random(0,255)<160)
					return State(null);
				panic=0;
				return ResolveState("WanderPanic");
			}
			return State(null);
		}
	WanderRunPanic:		//not calmed at all
		HLR1 A 0 A_SetSpeed(5);
		HLR1 ABC 1 A_Chase;
		HLR1 D 0 A_Look;
		HLR1 DEF 1 A_Chase;
		HLR1 G 0 A_Look;
		HLR1 GHI 1 A_Chase;
		HLR1 J 0 A_Look;
		HLR1 JKL 1 A_Chase;
		HLR1 M 0 A_Look;
		HLR1 MNO 1 A_Chase;
		HLR1 P 0 A_Look;
		HLR1 PQRS 1 A_Chase;
		HLR1 A 0 A_Look;
		HLR1 A 0
		{
			panic++;
			if(random(0,255)<4)//every once in a while it will say something
			{
				A_PlaySound("halflife/monsters/scientist/sight");
				return ResolveState("WanderRunPanic");
			}
			return state(null);
		}
		Goto WanderRunDecidePanic;
	Pain:
		HLP1 A 1 A_Pain;
		HLP1 BCDEFGH 1;
		Goto See;
	Death:
		HLD1 A 1 A_Scream;
		HLD1 BC 1;
		HLD1 D 1 A_NoBlocking;
		HLD1 EFGHIJKLMNOPQRS 1;
		HLD1 T 1 A_PlaySound("halflife/weapons/bodydrop");
		HLD1 U 1;
		HLD1 V -1;
		Stop;
	XDeath:
		TNT1 A 0 A_XenGibs(1);
		Stop;
	}
	void Chatter(int chance)
	{
		if(random(0,255)<chance)
			A_PlaySound("halflife/monsters/scientist/idle");
	}
}

class HLScientist2Path : HLScientist1Path
{
	Default
	{
		HLScientist1Path.Limits 45,35;
	}
}

class HLScientist3Path : HLScientist1Path
{
	Default
	{
		HLScientist1Path.Limits 55,65;
	}
}

class HLScientist4Path : HLScientist1Path
{
	Default
	{
		HLScientist1Path.Limits 65,65;
	}
}

//////////////////////////////////////////////////////////
//Previous code for scientists; only used for dead ones //
//////////////////////////////////////////////////////////

class HLScientistUpdate : Actor
{
	States
	{
	Spawn:
		TNT1 A 0;
		HLD1 V -1;
		Stop;
	}
}

class HLScientist1 : HLScientistUpdate{}
class HLScientist2 : HLScientistUpdate{}
class HLScientist3 : HLScientistUpdate{}