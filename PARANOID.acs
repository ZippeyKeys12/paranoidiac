#library "PARANOID"
#include "zcommon.acs"

script "AltHudAmmo" ENTER
{
	str heldtype="";
	if(CheckWeapon("Beretta"))
		heldtype="PistolHeldAmmo";
	else if(CheckWeapon("Python"))
		heldtype="MagnumHeldAmmo";
	else if(CheckWeapon("Pshotgun"))
		heldtype="ShotgunHeldAmmo";
	else if(CheckWeapon("ARifle"))
		heldtype="M16HeldAmmo";
	if(StrCmp(heldtype,"")&&GetCVar("screenblocks")==11&&GetCVar("hud_althud"))
	{
		setfont("CONFONT");
		HudMessage(d:CheckInventory(heldtype);HUDMSG_PLAIN, 3, CR_RED, 0.9, 1.0, 0.35);
	}
	delay(1);
	restart;
}

script "M16Ammo" ENTER
{
	if(CheckInventory("M16ClipGren")!=(CheckInventory("M16HeldAmmo")+CheckInventory("M16Gren")))
	{
		TakeInventory("M16ClipGren",70);
		GiveInventory("M16ClipGren",(CheckInventory("M16HeldAmmo")+CheckInventory("M16Gren")));
	}
	Delay(1);
	Restart;
}

//Sets up behavior for Barney to follow player
script "BarneyFollow"(int tid)
{
	int follow;
	while(ThingCount(T_NONE,tid))
	{
		if(!follow && distance(tid,tid+1) > 96.0)
		{
			follow=TRUE;
			SetActorState(tid,"See",YES);
			Thing_SetGoal(tid,tid+1,0,YES);
		}
		else if(follow && distance(tid,tid+1) <= 96.0)
		{
			follow=FALSE;
			SetActorState(tid,"Stand",YES);
			Thing_SetGoal(tid,tid+1,0,NO);
		}
		if(!follow)
			SetActorAngle(36,GetTargetAngle(tid,tid+1));
		delay(4);
	}
}

function int GetTargetAngle(int tid1,int tid2)
{
	return VectorAngle(GetActorX(tid2) - GetActorX(tid1),GetActorY(tid2) - GetActorY(tid1));
}
function int distance(int tid1,int tid2)
{
	int x,y,z,a,l;
	x = GetActorX(tid1) - GetActorX(tid2);
	y = GetActorY(tid1) - GetActorY(tid2);
	z = GetActorZ(tid1) - GetActorZ(tid2);
	a = VectorAngle(x,y);
	if((a + 0.125) % 0.5 > 0.25)
		l = FixedDiv(sin(a),y);
	else
		l = FixedDiv(cos(a),x);
	a = VectorAngle(l,z);
	if((a + 0.125) % 0.5 > 0.25)
		return FixedDiv(sin(a),z);
	return FixedDiv(cos(a),l);
}

script "MedStation"(int uses,int tex)
{
	if(GetActorProperty(0,APROP_Health)>=100) // Check health first.
	{
		SetResultValue(0);
		terminate;
	}
	if(uses>4)
	{
		ActivatorSound("MEDCHARGEUSED",127);
		SetResultValue(0);
		terminate;
	}
	HealThing(10);
	ActivatorSound("MEDCHARGE",127);
	if(uses==4)
	{
		setlinetexture(tex,SIDE_FRONT,TEXTURE_TOP,"XMEDIC02");
		setlinetexture(tex,SIDE_FRONT,TEXTURE_BOTTOM,"XMEDIC02");
	}
	SetResultValue(1);
}
script "ArmorStation"(int uses,int tex)
{
	if(CheckInventory("Armor")>=100)
	{
		SetResultValue(0);
		terminate;
	}
	if(uses>4)
	{
		ActivatorSound("HEVCHARGEUSED",127);
		SetResultValue(0);
		terminate;
	}
	GiveInventory("HEVCharge",10);
	ActivatorSound("HEVCHARGE",127);
	if(uses==4)
	{
		setlinetexture(tex,SIDE_FRONT,TEXTURE_TOP,"XARMOR02");
		setlinetexture(tex,SIDE_FRONT,TEXTURE_BOTTOM,"XARMOR02");
	}
	SetResultValue(1);
}

//Hint messages that are run when player uses the inventory item "MessageItem**"
function void hintmessage(str message,str icon,int holdtime,int holdtime2)
{
	PlaySound(0,"radiostatic",6,1.0,0,ATTN_STATIC);
	PlaySound(0,message,7,1.0,0,ATTN_STATIC);
	SetHUDSize(640,480,1);
	SetFont(icon);
	HUDMessage(s:"A";HUDMSG_PLAIN,1,CR_UNTRANSLATED,0.1,30.1,holdtime);
	SetFont("smallfont");
	if(holdtime2)
		HUDMessage(l:message;HUDMSG_TYPEON|HUDMSG_LOG,2,CR_GOLD,80.1,30.1,holdtime2,0.062,0.05);
	else
		HUDMessage(l:message;HUDMSG_PLAIN|HUDMSG_LOG,2,CR_GOLD,80.1,30.1,holdtime);
}

//Map02: Message 1
Script 501(void)
{
	hintmessage("MAP2VOX1","HINTMAN",7.0,0);
	delay(8*35);
	PlaySound(0,"radiostatic",6,1.0,0,ATTN_STATIC);
}

//Map02: Message 2
//Map04: Message 4
Script 502(void)
{
	hintmessage("MAP2VOX2","HINTMAN",5.0,0);
	delay(6*35);
	PlaySound(0,"radiostatic",6,1.0,0,ATTN_STATIC);
}

//Map02: Message 3
Script 503(void)
{
	hintmessage("MAP2VOX3","HINTMAN",6.0,0);
	delay(7*35);
	PlaySound(0,"radiostatic",6,1.0,0,ATTN_STATIC);
}

//Map02: Message 4
Script 504(void)
{
	hintmessage("MAP2VOX4","HINTMAN",9.0,0);
	delay(9*35);
	PlaySound(0,"radiostatic",6,1.0,0,ATTN_STATIC);
}

//Map03: Message 1
Script 505(void)
{
	hintmessage("MAP3VOX1","HINTMAN",18.0,0);
	delay(16*35);
	PlaySound(0,"radiostatic",6,1.0,0,ATTN_STATIC);
}

//Map03: Message 2
Script 506(void)
{
	hintmessage("MAP3VOX2","HINTMAN",18.0,0);
	delay(14*35);
	PlaySound(0,"radiostatic",6,1.0,0,ATTN_STATIC);
}

//Map03: Message 3
Script 507(void)
{
	hintmessage("MAP3VOX3","HINTMAN",11.0,0);
	delay(10*35);
	PlaySound(0,"radiostatic",6,1.0,0,ATTN_STATIC);
}

//Map04: Message 1
Script 508(void)
{
	hintmessage("MAP4VOX1","HINTMAN",12.0,0);
	delay(10*35);
	PlaySound(0,"radiostatic",6,1.0,0,ATTN_STATIC);
}

//Map04: Message 2
Script 509(void)
{
	hintmessage("MAP4VOX2","HINTMAN",15.0,0);
	delay(15*35);
	PlaySound(0,"radiostatic",6,1.0,0,ATTN_STATIC);
}

//Map04: Message 3
Script 510(void)
{
	hintmessage("MAP4VOX3","HINTMAN",13.0,0);
	delay(10*35);
	PlaySound(0,"radiostatic",6,1.0,0,ATTN_STATIC);
}

//Map08: Message 1
Script 511(void)
{
	hintmessage("MAP8VOX1","HINTMAN",7.0,0);
	delay(8*35);
	PlaySound(0,"radiostatic",6,1.0,0,ATTN_STATIC);
}

//Map05: Message 1
Script 512(void)
{
	hintmessage("MAP5VOX1","HINTMAN",5.0,0);
	delay(6*35);
	PlaySound(0,"radiostatic",6,1.0,0,ATTN_STATIC);
}

//Map05: Message 2
Script 513(void)
{
	hintmessage("MAP5VOX2","HINTMAN",15.0,0);
	delay(13*35);
	PlaySound(0,"radiostatic",6,1.0,0,ATTN_STATIC);
}

//Map05: Message 3
Script 514(void)
{
	hintmessage("MAP5VOX3","HINTMAN",10.0,0);
	delay(8*35);
	PlaySound(0,"radiostatic",6,1.0,0,ATTN_STATIC);
}

//Map06: Message 1
Script 515(void)
{
	hintmessage("MAP6VOX1","HINTMAN",4.0,0);
	delay(5*35);
	PlaySound(0,"radiostatic",6,1.0,0,ATTN_STATIC);
}

//Map06: Message 2
Script 516(void)
{
	hintmessage("MAP6VOX2","HINTMAN",8.0,0);
	delay(7*35);
	PlaySound(0,"radiostatic",6,1.0,0,ATTN_STATIC);
}

//Map07: Message 1
Script 517(void)
{
	hintmessage("MAP7VOX1","HINTMAN",5.0,0);
	delay(5*35);
	PlaySound(0,"radiostatic",6,1.0,0,ATTN_STATIC);
}

//Map07: Message 2
Script 518(void)
{
	hintmessage("MAP7VOX2","HINTMAN",8.0,0);
	delay(8*35);
	PlaySound(0,"radiostatic",6,1.0,0,ATTN_STATIC);
}

//Script 519 & MessageItem19 already assigned to Map04

//Map10: Message 1 (Col. Stinson)
Script 520 (void)
{
	hintmessage("MAP10VX1","STINSON",42.0,4.6);
	delay(42*35);
	PlaySound(0,"radiostatic",6,1.0,0,ATTN_STATIC);
}

//Map11: Message 1 (Col. Stinson)
Script 521 (void)
{
	hintmessage("MAP11VX1","STINSON",18.0,2.1);
	delay(18*35);
	PlaySound(0,"radiostatic",6,1.0,0,ATTN_STATIC);
}

//Map12: Message 1 (Col. Stinson)
Script 522 (void)
{
	hintmessage("MAP12VX1","STINSON",32.0,2.65);
	delay(32*35);
	PlaySound(0,"radiostatic",6,1.0,0,ATTN_STATIC);
}

//Map12: Message 2 (UnderNet)
Script 523 (void)
{
	hintmessage("MAP12VX2","UNDERNET",39.0,3.25);
	delay(39*35);
	PlaySound(0,"radiostatic",6,1.0,0,ATTN_STATIC);
}

//Map13: Message 1 (Col. Stinson)
Script 524 (void)
{
	hintmessage("MAP13VX1","STINSON",29.0,2.01);
	delay(29*35);
	PlaySound(0,"radiostatic",6,1.0,0,ATTN_STATIC);
}

//Map13: Message 2 (UnderNet)
Script 525 (void)
{
	hintmessage("MAP13VX2","UNDERNET",38.0,3.21);
	delay(38*35);
	PlaySound(0,"radiostatic",6,1.0,0,ATTN_STATIC);
}

//Map14: Message 1 (Col. Stinson)
Script 526 (void)
{
	hintmessage("MAP14VX1","STINSON",13.0,2.94);
	delay(13*35);
	PlaySound(0,"radiostatic",6,1.0,0,ATTN_STATIC);
}

//Map14: Message 2 (Col. Stinson)
Script 527 (void)
{
	hintmessage("MAP14VX2","STINSON",27.0,1.3);
	delay(27*35);
	PlaySound(0,"radiostatic",6,1.0,0,ATTN_STATIC);
}

//Map15: Message 1 (Col. Stinson)
Script 528 (void)
{
	hintmessage("MAP15VX1","STINSON",18.0,1.2);
	delay(18*35);
	PlaySound(0,"radiostatic",6,1.0,0,ATTN_STATIC);
}

//Map16: Message 1 (Col. Stinson)
Script 529 (void)
{
	hintmessage("MAP16VX1","STINSON",21.0,1.0);
	delay(21*35);
	PlaySound(0,"radiostatic",6,1.0,0,ATTN_STATIC);
}

//Map16: Message 2 (UnderNet)
Script 530 (void)
{
	hintmessage("MAP16VX2","UNDERNET",29.0,2.3);
	delay(29*35);
	PlaySound(0,"radiostatic",6,1.0,0,ATTN_STATIC);
}

//Map16: Message 3 (Col. Stinson)
Script 531 (void)
{
	hintmessage("MAP16VX3","STINSON",24.0,2.6);
	delay(24*35);
	PlaySound(0,"radiostatic",6,1.0,0,ATTN_STATIC);
}

//Map17: Message 1 (Col. Stinson)
Script 532 (void)
{
	hintmessage("MAP17VX1","STINSON",16.0,1.7);
	delay(16*35);
	PlaySound(0,"radiostatic",6,1.0,0,ATTN_STATIC);
}

//////////////////////////////////////
//Script 872: Osprey body/rotors	//
//////////////////////////////////////

int PartOffset[2][3]={{340.0,0,0.25},{342.0,0,-0.25}};

script 872 (void)
{
	Thing_ChangeTID(0,1000);
	for(int i=0;i<2;i++)
	{
		int a = (GetActorAngle(0) + PartOffset[i][2] + 1.0) % 1.0;
		Spawn("OspreyBlade",
		GetActorX(0) + FixedMul(cos(a), PartOffset[i][0]),
		GetActorY(0) + FixedMul(sin(a), PartOffset[i][0]),
		GetActorZ(0) + PartOffset[i][1],
		1000 + i + 1,GetActorAngle(0) >> 8);
	}
}

#define OSPREY_TID		1000
#define OFFSET_RADIUS	0
#define OFFSET_VERTICAL	1
#define OFFSET_ANGLE	2

int OspreyBob;
script "OspreyFlight"(int movertid)
{
	int i,a,b,z;
	Thing_Activate(movertid);
	ACS_NamedExecute("OspreyFlight2",0);
	while(1)
	{
		a=GetActorAngle(movertid);
		SetActorAngle(OSPREY_TID,a);
		SetActorPosition(OSPREY_TID,
		GetActorX(movertid),
		GetActorY(movertid),
		GetActorZ(movertid) + FixedMul(sin(OspreyBob),16.0),0);
		for(i=0;i<2;i++)
		{
			a =(GetActorAngle(movertid) + PartOffset[i][OFFSET_ANGLE] + 1.0) % 1.0;
			SetActorPosition(OSPREY_TID + 1 + i,
			GetActorX(movertid) + FixedMul(cos(a),PartOffset[i][OFFSET_RADIUS]),
			GetActorY(movertid) + FixedMul(sin(a),PartOffset[i][OFFSET_RADIUS]),
			GetActorZ(movertid) + PartOffset[i][OFFSET_VERTICAL] + FixedMul(sin(OspreyBob),16.0),0);
			SetActorAngle(OSPREY_TID + 1 + i,GetActorAngle(movertid));
			delay(1);
		}
	}
}
script "OspreyFlight2"(void)
{
	OspreyBob += 512;
	OspreyBob %= 1.0;
	delay(1);
	restart;
}

//////////////////////////////
// Script 444: Waterfall	//
//////////////////////////////

str WFallParticles[10] =
{
	"WFallParticle1A","WFallParticle1B",
	"WFallParticle2A","WFallParticle2B",
	"WFallParticle3A","WFallParticle3B",
	"WFallParticle4A","WFallParticle4B",
	"WFallParticle5A","WFallParticle5B"
};

script 444 (int size)
{
	for(int r=0;r<size<<16;r+=random(4.0,8.0))
	{
		Spawn(WFallParticles[random(0,9)],
		GetActorX(0)+random(-8.0,8.0)+FixedMul(cos(GetActorAngle(0)),r),
		GetActorY(0)+random(-8.0,8.0)+FixedMul(sin(GetActorAngle(0)),r),
		GetActorZ(0)+random(-8.0,8.0),
		0,GetActorAngle(0)>>8);
	}
}

//////////////////////////////
// Script 729-730: Bubbles	//
//////////////////////////////

str Bubble[5] ={"Bubble1","Bubble2","Bubble3","Bubble4","Bubble5"};

script 729 (void)
{
	int r = random(0,65536);
	SetActorAngle(0, GetActorAngle(0) + 0.125);
	SetActorPosition(0,
		GetActorX(0) + FixedMul(cos(GetActorAngle(0)), r),
		GetActorY(0) + FixedMUl(sin(GetActorAngle(0)), r),
		GetActorZ(0),0);
}

script 730 (int area, int intensity, int shape)
{
	int i, a, r;
	area += random(0, 8);
	intensity += 1;
	switch (shape)
	{
	case 0:	//square
		area /= 2;
		area <<= 16;
		for (i=0; i<intensity; i++)
			Spawn(Bubble[random(0, 4)],
				GetActorX(0) + random(-area, area),
				GetActorY(0) + random(-area, area),
				GetActorZ(0),0,random(0, 255));
		break;
	case 1:	//circle
		area /= 2;
		area <<= 16;
		for (i=0; i<intensity; i++)
		{
			r = random(0, area);
			a = random(0,65536);
			Spawn(Bubble[random(0, 4)],
				GetActorX(0) + FixedMul(cos(a), r),
				GetActorY(0) + FixedMul(sin(a), r),
				GetActorZ(0),0,a >> 8);
		}
		break;
	case 2:	//line
		area <<= 16;
		for (i=0; i<intensity; i++)
		{
			r = random(0, area);
			Spawn(Bubble[random(0, 4)],
				GetActorX(0) + FixedMul(cos(GetActorAngle(0)), r),
				GetActorY(0) + FixedMul(sin(GetActorAngle(0)), r),
				GetActorZ(0),0,GetActorAngle(0) >> 8);
		}
		break;
	}
}

//STEAM
script 770(int size,int pitch,int plane)
{
	int momentum;
	int angle=GetActorAngle(0)+random(-1024,1024);
	pitch+=random(-4,4);
	pitch<<=8;
	switch(plane)
	{
	case 0:
		momentum=FixedMul(cos(GetActorAngle(0)),FixedMul(cos(pitch),random(30.0,35.0)));
		break;
	case 1:
		momentum=FixedMul(sin(GetActorAngle(0)),FixedMul(cos(Pitch),random(30.0,35.0)));
		break;
	case 2:
		momentum=FixedMul(-sin(pitch),random(30.0,35.0));
		break;
	}
	SetResultValue(momentum*(size+1)/5>>16);
}

//////////////////////////
// Script 777: Flames	//
//////////////////////////

#define FIRE_CIRCLE     0
#define FIRE_SQUARE     1
#define FIRE_LINE       2

#define FIRE_TID        -16384
#define GLOW_TID        -16383
#define EMBER_TID       -16382

#define GLOW_NONE       0
#define GLOW_GROUND     1
#define GLOW_RAISE      2
#define GLOW_BOTH       3

#define FIRE_SPEED_LOW  8
#define FIRE_SPEED_HIGH 12

str Flame[30][3] =
{
	{"Flame1A_01", "Flame1A_02", "Flame1A_03"},
	{"Flame1B_01", "Flame1B_02", "Flame1B_03"},
	{"Flame2A_01", "Flame2A_02", "Flame2A_03"},
	{"Flame2B_01", "Flame2B_02", "Flame2B_03"},
	{"Flame3A_01", "Flame3A_02", "Flame3A_03"},
	{"Flame3B_01", "Flame3B_02", "Flame3B_03"},
	{"Flame4A_01", "Flame4A_02", "Flame4A_03"},
	{"Flame4B_01", "Flame4B_02", "Flame4B_03"},
	{"Flame5A_01", "Flame5A_02", "Flame5A_03"},
	{"Flame5B_01", "Flame5B_02", "Flame5B_03"},
	{"Flame6A_01", "Flame6A_02", "Flame6A_03"},
	{"Flame6B_01", "Flame6B_02", "Flame6B_03"},
	{"Flame7A_01", "Flame7A_02", "Flame7A_03"},
	{"Flame7B_01", "Flame7B_02", "Flame7B_03"},
	{"Flame8A_01", "Flame8A_02", "Flame8A_03"},
	{"Flame8B_01", "Flame8B_02", "Flame8B_03"},
	{"Flame9A_01", "Flame9A_02", "Flame9A_03"},
	{"Flame9B_01", "Flame9B_02", "Flame9B_03"},
	{"Flame10A_01", "Flame10A_02", "Flame10A_03"},
	{"Flame10B_01", "Flame10B_02", "Flame10B_03"},
	{"Flame11A_01", "Flame11A_02", "Flame11A_03"},
	{"Flame11B_01", "Flame11B_02", "Flame11B_03"},
	{"Flame12A_01", "Flame12A_02", "Flame12A_03"},
	{"Flame12B_01", "Flame12B_02", "Flame12B_03"},
	{"Flame13A_01", "Flame13A_02", "Flame13A_03"},
	{"Flame13B_01", "Flame13B_02", "Flame13B_03"},
	{"Flame14A_01", "Flame14A_02", "Flame14A_03"},
	{"Flame14B_01", "Flame14B_02", "Flame14B_03"},
	{"Flame14A_01", "Flame14A_02", "Flame14A_03"},
	{"Flame14B_01", "Flame14B_02", "Flame14B_03"}
};

str FlameGlow[3] = {"FlameGlow_02", "FlameGLow_04", "FlameGlow_06"};

function void SpawnGlow (int x, int y, int z, int a, int s, int t, int glow)
{
	switch (glow)
	{
	case GLOW_GROUND:
		Spawn(FlameGlow[s], x, y, z, 0, a >> 8);
		break;
	case GLOW_RAISE:
		Spawn(FlameGlow[s], x, y, z, GLOW_TID, a >> 8);
		ThrustThingZ(GLOW_TID, t, 0, 0);
		Thing_ChangeTID(GLOW_TID, 0);
		break;
	case GLOW_BOTH:
		Spawn(FlameGlow[s], x, y, z, 0, a >> 8);
		Spawn(FlameGlow[s], x, y, z, GLOW_TID, a >> 8);
		ThrustThingZ(GLOW_TID, t, 0, 0);
		Thing_ChangeTID(GLOW_TID, 0);
		break;
	}
}

function void SpawnEmber (int x, int y, int z)
{
	if (!random(0, 64))
	{
		int a = random(0, 255);
		Spawn("Ember", x, y, z, EMBER_TID, a);
		ThrustThingZ(EMBER_TID, random(12, 24), 0, 0);
		ThrustThing(a, random(-2, 2)/2, 0, EMBER_TID);
		Thing_ChangeTID(EMBER_TID, 0);
	}
}

script 777 (int area, int shape, int glow)
{
	int a, r, x, y, s, t, i;
	switch (shape)
	{
	case FIRE_CIRCLE:
		for (i=0; i<area/32+1; i++)
		{
			a = random(0, 65535);
			r = random(0, (area / 2) << 16);
			s = random(0, 2);
			t = random(FIRE_SPEED_LOW, FIRE_SPEED_HIGH);
			x = GetActorX(0) + FixedMul(cos(a), r);
			y = GetActorY(0) + FixedMul(sin(a), r);
			Spawn(Flame[random(0, 29)][s], x, y, GetActorZ(0), FIRE_TID, a >> 8);
			ThrustThingZ(FIRE_TID, t, 0, 0);
			Thing_ChangeTID(FIRE_TID, 0);
			SpawnGlow(x, y, GetActorZ(0), a, s, t, glow);
			SpawnEmber(x, y, GetActorZ(0));
		}
		break;
	case FIRE_SQUARE:
		for (i=0; i<area/32+1; i++)
		{
			a = random(0, 65535);
			s = random(0, 2);
			t = random(FIRE_SPEED_LOW, FIRE_SPEED_HIGH);
			x = GetActorX(0) + random(-(area<<16)/2, (area<<16)/2);
			y = GetActorY(0) + random(-(area<<16)/2, (area<<16)/2);
			Spawn(Flame[random(0, 29)][s], x, y, GetActorZ(0), FIRE_TID, a >> 8);
			ThrustThingZ(FIRE_TID, t, 0, 0);
			Thing_ChangeTID(FIRE_TID, 0);
			SpawnGlow(x, y, GetActorZ(0), a, s, t, glow);
			SpawnEmber(x, y, GetActorZ(0));
		}
		break;
	case FIRE_LINE:
		for (i=0; i<area/32+1; i++)
		{
			a = GetActorAngle(0);
			r = random(0, area << 16);
			s = random(0, 2);
			t = random(FIRE_SPEED_LOW, FIRE_SPEED_HIGH);
			x = GetActorX(0) + FixedMul(cos(a), r);
			y = GetActorY(0) + FixedMul(sin(a), r);
			Spawn(Flame[random(0, 29)][s], x, y, GetActorZ(0), FIRE_TID, a >> 8);
			ThrustThingZ(FIRE_TID, t, 0, 0);
			Thing_ChangeTID(FIRE_TID, 0);
			SpawnGlow(x, y, GetActorZ(0), a, s, t, glow);
			SpawnEmber(x, y, GetActorZ(0));
		}
		break;
	}
}