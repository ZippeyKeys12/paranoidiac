#library "PARANOID"
#include "zcommon.acs"

script "AltHudAmmo" ENTER
{
	str heldtype="";
	if(CheckWeapon("Beretta"))
		heldtype="PistolHeldAmmo";
	else if(CheckWeapon("Python"))
		heldtype="MagnumHeldAmmo";
	else if(CheckWeapon("Pshotgun"))
		heldtype="ShotgunHeldAmmo";
	else if(CheckWeapon("ARifle"))
		heldtype="M16HeldAmmo";
	if(StrCmp(heldtype,"")&&GetCVar("screenblocks")==11&&GetCVar("hud_althud"))
	{
		setfont("CONFONT");
		HudMessage(d:CheckInventory(heldtype);HUDMSG_PLAIN,3,CR_RED,0.9,1.0,0.35);
	}
	delay(1);
	restart;
}

script "MedStation"(int uses,int tex)
{
	if(GetActorProperty(0,APROP_Health)>=100) // Check health first.
	{
		SetResultValue(0);
		terminate;
	}
	if(uses>4)
	{
		ActivatorSound("MEDCHARGEUSED",127);
		SetResultValue(0);
		terminate;
	}
	HealThing(10);
	ActivatorSound("MEDCHARGE",127);
	if(uses==4)
	{
		setlinetexture(tex,SIDE_FRONT,TEXTURE_TOP,"XMEDIC02");
		setlinetexture(tex,SIDE_FRONT,TEXTURE_BOTTOM,"XMEDIC02");
	}
	SetResultValue(1);
}
script "ArmorStation"(int uses,int tex)
{
	if(CheckInventory("Armor")>=100)
	{
		SetResultValue(0);
		terminate;
	}
	if(uses>4)
	{
		ActivatorSound("HEVCHARGEUSED",127);
		SetResultValue(0);
		terminate;
	}
	GiveInventory("HEVCharge",10);
	ActivatorSound("HEVCHARGE",127);
	if(uses==4)
	{
		setlinetexture(tex,SIDE_FRONT,TEXTURE_TOP,"XARMOR02");
		setlinetexture(tex,SIDE_FRONT,TEXTURE_BOTTOM,"XARMOR02");
	}
	SetResultValue(1);
}

//Hint messages that are run when player uses the inventory item "MessageItem**"
str hintsnd[32][2]=
{
	{"MAP2VOX1","HINTMAN"},
	{"MAP2VOX2","HINTMAN"},
	{"MAP2VOX3","HINTMAN"},
	{"MAP2VOX4","HINTMAN"},
	{"MAP3VOX1","HINTMAN"},
	{"MAP3VOX2","HINTMAN"},
	{"MAP3VOX3","HINTMAN"},
	{"MAP4VOX1","HINTMAN"},
	{"MAP4VOX2","HINTMAN"},
	{"MAP4VOX3","HINTMAN"},
	{"MAP8VOX1","HINTMAN"},
	{"MAP5VOX1","HINTMAN"},
	{"MAP5VOX2","HINTMAN"},
	{"MAP5VOX3","HINTMAN"},
	{"MAP6VOX1","HINTMAN"},
	{"MAP6VOX2","HINTMAN"},
	{"MAP7VOX1","HINTMAN"},
	{"MAP7VOX2","HINTMAN"},
	{"",""},
	{"MAP10VX1","STINSON"},
	{"MAP11VX1","STINSON"},
	{"MAP12VX1","STINSON"},
	{"MAP12VX2","UNDERNET"},
	{"MAP13VX1","STINSON"},
	{"MAP13VX2","UNDERNET"},
	{"MAP14VX1","STINSON"},
	{"MAP14VX2","STINSON"},
	{"MAP15VX1","STINSON"},
	{"MAP16VX1","STINSON"},
	{"MAP16VX2","UNDERNET"},
	{"MAP16VX3","STINSON"},
	{"MAP17VX1","STINSON"}
};
int delays[32][2]=
{
	{8,0},{6,0},{7,0},{9,0},{16,0},
	{14,0},{10,0},{10,0},{15,0},{10,0},
	{8,0},{6,0},{13,0},{8,0},{5,0},
	{7,0},{5,0},{8,0},{0,0},{42,4.6},
	{18,2.1},{32,2.65},{39,3.25},{29,2.01},{38,3.21},
	{13,2.94},{27,1.3},{18,1.2},{21,1.0},{29,2.3},
	{24,2.6},{16,1.7}
};
function void hintmessage(str message,str icon,int holdtime,int holdtime2)
{
	PlaySound(0,"radiostatic",6,1.0,0,ATTN_STATIC);
	PlaySound(0,message,7,1.0,0,ATTN_STATIC);
	SetHUDSize(640,480,1);
	SetFont(icon);
	HUDMessage(s:"A";HUDMSG_PLAIN,1,CR_UNTRANSLATED,0.1,30.1,holdtime);
	SetFont("smallfont");
	if(holdtime2)
		HUDMessage(l:message;HUDMSG_TYPEON|HUDMSG_LOG,2,CR_GOLD,80.1,30.1,holdtime2,0.062,0.05);
	else
		HUDMessage(l:message;HUDMSG_PLAIN|HUDMSG_LOG,2,CR_GOLD,80.1,30.1,holdtime);
}
script "HintMessage"(int message)
{
	hintmessage(hintsnd[message-1][0],hintsnd[message-1][1],delays[message-1][0]*1.0,delays[message-1][1]);
	delay(delays[message-1][0]*35);
	PlaySound(0,"radiostatic",6,1.0,0,ATTN_STATIC);
}

//////////////////////////////
// Script 444: Waterfall	//
//////////////////////////////

str WFallParticles[10] =
{
	"WFallParticle1A","WFallParticle1B",
	"WFallParticle2A","WFallParticle2B",
	"WFallParticle3A","WFallParticle3B",
	"WFallParticle4A","WFallParticle4B",
	"WFallParticle5A","WFallParticle5B"
};

script 444 (int size)
{
	for(int r=0;r<size<<16;r+=random(4.0,8.0))
	{
		Spawn(WFallParticles[random(0,9)],
		GetActorX(0)+random(-8.0,8.0)+FixedMul(cos(GetActorAngle(0)),r),
		GetActorY(0)+random(-8.0,8.0)+FixedMul(sin(GetActorAngle(0)),r),
		GetActorZ(0)+random(-8.0,8.0),
		0,GetActorAngle(0)>>8);
	}
}

//STEAM
script 770(int size,int pitch,int plane)
{
	int momentum;
	int angle=GetActorAngle(0)+random(-1024,1024);
	pitch+=random(-4,4);
	pitch<<=8;
	switch(plane)
	{
	case 0:
		momentum=FixedMul(cos(GetActorAngle(0)),FixedMul(cos(pitch),random(30.0,35.0)));
		break;
	case 1:
		momentum=FixedMul(sin(GetActorAngle(0)),FixedMul(cos(Pitch),random(30.0,35.0)));
		break;
	case 2:
		momentum=FixedMul(-sin(pitch),random(30.0,35.0));
		break;
	}
	SetResultValue(momentum*(size+1)/5>>16);
}

//////////////////////////
// Script 777: Flames	//
//////////////////////////

#define FIRE_CIRCLE     0
#define FIRE_SQUARE     1
#define FIRE_LINE       2

#define FIRE_TID        -16384
#define GLOW_TID        -16383
#define EMBER_TID       -16382

#define GLOW_NONE       0
#define GLOW_GROUND     1
#define GLOW_RAISE      2
#define GLOW_BOTH       3

#define FIRE_SPEED_LOW  8
#define FIRE_SPEED_HIGH 12

str Flame[30][3] =
{
	{"Flame1A_01", "Flame1A_02", "Flame1A_03"},
	{"Flame1B_01", "Flame1B_02", "Flame1B_03"},
	{"Flame2A_01", "Flame2A_02", "Flame2A_03"},
	{"Flame2B_01", "Flame2B_02", "Flame2B_03"},
	{"Flame3A_01", "Flame3A_02", "Flame3A_03"},
	{"Flame3B_01", "Flame3B_02", "Flame3B_03"},
	{"Flame4A_01", "Flame4A_02", "Flame4A_03"},
	{"Flame4B_01", "Flame4B_02", "Flame4B_03"},
	{"Flame5A_01", "Flame5A_02", "Flame5A_03"},
	{"Flame5B_01", "Flame5B_02", "Flame5B_03"},
	{"Flame6A_01", "Flame6A_02", "Flame6A_03"},
	{"Flame6B_01", "Flame6B_02", "Flame6B_03"},
	{"Flame7A_01", "Flame7A_02", "Flame7A_03"},
	{"Flame7B_01", "Flame7B_02", "Flame7B_03"},
	{"Flame8A_01", "Flame8A_02", "Flame8A_03"},
	{"Flame8B_01", "Flame8B_02", "Flame8B_03"},
	{"Flame9A_01", "Flame9A_02", "Flame9A_03"},
	{"Flame9B_01", "Flame9B_02", "Flame9B_03"},
	{"Flame10A_01", "Flame10A_02", "Flame10A_03"},
	{"Flame10B_01", "Flame10B_02", "Flame10B_03"},
	{"Flame11A_01", "Flame11A_02", "Flame11A_03"},
	{"Flame11B_01", "Flame11B_02", "Flame11B_03"},
	{"Flame12A_01", "Flame12A_02", "Flame12A_03"},
	{"Flame12B_01", "Flame12B_02", "Flame12B_03"},
	{"Flame13A_01", "Flame13A_02", "Flame13A_03"},
	{"Flame13B_01", "Flame13B_02", "Flame13B_03"},
	{"Flame14A_01", "Flame14A_02", "Flame14A_03"},
	{"Flame14B_01", "Flame14B_02", "Flame14B_03"},
	{"Flame14A_01", "Flame14A_02", "Flame14A_03"},
	{"Flame14B_01", "Flame14B_02", "Flame14B_03"}
};

str FlameGlow[3] = {"FlameGlow_02", "FlameGLow_04", "FlameGlow_06"};

function void SpawnGlow (int x, int y, int z, int a, int s, int t, int glow)
{
	switch (glow)
	{
	case GLOW_GROUND:
		Spawn(FlameGlow[s], x, y, z, 0, a >> 8);
		break;
	case GLOW_RAISE:
		Spawn(FlameGlow[s], x, y, z, GLOW_TID, a >> 8);
		ThrustThingZ(GLOW_TID, t, 0, 0);
		Thing_ChangeTID(GLOW_TID, 0);
		break;
	case GLOW_BOTH:
		Spawn(FlameGlow[s], x, y, z, 0, a >> 8);
		Spawn(FlameGlow[s], x, y, z, GLOW_TID, a >> 8);
		ThrustThingZ(GLOW_TID, t, 0, 0);
		Thing_ChangeTID(GLOW_TID, 0);
		break;
	}
}

function void SpawnEmber (int x, int y, int z)
{
	if (!random(0, 64))
	{
		int a = random(0, 255);
		Spawn("Ember", x, y, z, EMBER_TID, a);
		ThrustThingZ(EMBER_TID, random(12, 24), 0, 0);
		ThrustThing(a, random(-2, 2)/2, 0, EMBER_TID);
		Thing_ChangeTID(EMBER_TID, 0);
	}
}

script 777 (int area, int shape, int glow)
{
	int a, r, x, y, s, t, i;
	switch (shape)
	{
	case FIRE_CIRCLE:
		for (i=0; i<area/32+1; i++)
		{
			a = random(0, 65535);
			r = random(0, (area / 2) << 16);
			s = random(0, 2);
			t = random(FIRE_SPEED_LOW, FIRE_SPEED_HIGH);
			x = GetActorX(0) + FixedMul(cos(a), r);
			y = GetActorY(0) + FixedMul(sin(a), r);
			Spawn(Flame[random(0, 29)][s], x, y, GetActorZ(0), FIRE_TID, a >> 8);
			ThrustThingZ(FIRE_TID, t, 0, 0);
			Thing_ChangeTID(FIRE_TID, 0);
			SpawnGlow(x, y, GetActorZ(0), a, s, t, glow);
			SpawnEmber(x, y, GetActorZ(0));
		}
		break;
	case FIRE_SQUARE:
		for (i=0; i<area/32+1; i++)
		{
			a = random(0, 65535);
			s = random(0, 2);
			t = random(FIRE_SPEED_LOW, FIRE_SPEED_HIGH);
			x = GetActorX(0) + random(-(area<<16)/2, (area<<16)/2);
			y = GetActorY(0) + random(-(area<<16)/2, (area<<16)/2);
			Spawn(Flame[random(0, 29)][s], x, y, GetActorZ(0), FIRE_TID, a >> 8);
			ThrustThingZ(FIRE_TID, t, 0, 0);
			Thing_ChangeTID(FIRE_TID, 0);
			SpawnGlow(x, y, GetActorZ(0), a, s, t, glow);
			SpawnEmber(x, y, GetActorZ(0));
		}
		break;
	case FIRE_LINE:
		for (i=0; i<area/32+1; i++)
		{
			a = GetActorAngle(0);
			r = random(0, area << 16);
			s = random(0, 2);
			t = random(FIRE_SPEED_LOW, FIRE_SPEED_HIGH);
			x = GetActorX(0) + FixedMul(cos(a), r);
			y = GetActorY(0) + FixedMul(sin(a), r);
			Spawn(Flame[random(0, 29)][s], x, y, GetActorZ(0), FIRE_TID, a >> 8);
			ThrustThingZ(FIRE_TID, t, 0, 0);
			Thing_ChangeTID(FIRE_TID, 0);
			SpawnGlow(x, y, GetActorZ(0), a, s, t, glow);
			SpawnEmber(x, y, GetActorZ(0));
		}
		break;
	}
}