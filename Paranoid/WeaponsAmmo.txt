class ParanoidWeapon : Weapon
{
	override void PostBeginPlay()
	{
		if(bTOSSED)
			angle=random(0,359);
	}
	Default
	{
		+WEAPON.NOALERT
		+INVENTORY.IGNORESKILL
		+WEAPON.AMMO_CHECKBOTH
		Weapon.BobRangeX 0;
		Weapon.BobRangeY .25;
		Weapon.BobStyle "Smooth";
	}
	States
	{
	Deselect:
		HWU1 ABCDEFGHIJKLMN 1;
		TNT1 A 0 A_Lower;
		Wait;
	Select:
		TNT1 A 0 A_Raise;
		Loop;
	Fire:
	Ready:
		TNT1 A 0;
		HWU1 NMLKJIHGFEDCBA 1;
		TNT1 A 0 A_Jump(256,"Ready2");
	Ready2:
		HWI1 A 1 A_WeaponReady;
		Loop;
	Spawn:
		POSS A -1;
		Stop;
	}
	action void WeaponRecoil(int climb)
		{A_SetPitch(pitch-climb*(360.0/65536.0));}
}

class ParanoidWeaponGiver : WeaponGiver
{
	string Weapon1,Weapon2;
	int Weapon1Amount;
	Property Weapon1: Weapon1,Weapon2,Weapon1Amount;
	override void PostBeginPlay()
	{
		if(bTOSSED)
			angle=random(0,359);
	}
	override bool TryPickup(in out Actor toucher)
	{
		if(WeaponGiver.TryPickup(toucher))
		{
			toucher.A_GiveInventory(Weapon1,Weapon1Amount);
			GoAwayAndDie();
			return true;
		}
		if(toucher.A_GiveInventory(Weapon2,Weapon1Amount))
		{
			GoAwayAndDie();
			return true;
		}
		return false;
	}
	States
	{
	Spawn:
		POSS A -1;
		Stop;
	}
}

//****************************************
// Dummy item for light on player weapons
//****************************************
class LighCheapHack : Actor
{
	Default
	{
		+NOINTERACTION
	}
	States
	{
	Spawn:
		TNT1 A 3 LIGHT("YellowMediumFlicker3");
		TNT1 A 3 LIGHT("YellowSmallFlicker1");
		Stop;
	}
}

//===============
// Gun Smoke
//===============

class GunSmoke : Actor
{
	Default
	{
		Radius 1;
		Height 1;
		PROJECTILE;
		+NOGRAVITY
		+FLOORCLIP
		+NOBLOCKMAP
		Alpha .33;
		Scale .25;
		Mass 0;
		RenderStyle "Add";
		+FORCEXYBILLBOARD
	}
	States
	{
	Spawn:
	   TNT1 A 0 NODELAY A_Jump(210,6,8,10,12,14);
	   WPXS ABCDEFGHIJKLMNOPQRSTUVWXYZ[\] 1 A_FadeOut(.01);
	   Stop;
	}
}

class GunSmallSmoke : GunSmoke{Default{Scale .16;}}

class GunSmallSmokeSpawner : Actor
{
	Default
	{
		Radius 1;
		Height 1;
		Speed 14;
		PROJECTILE;
		+NOTIMEFREEZE
	}
	States
	{
	Spawn:
		TNT1 A 1;
		TNT1 A 5 A_SpawnProjectile("GunSmallSmoke2",-2);
		Stop;
	}
}

class GunSmallSmoke2 : GunSmallSmoke{Default{Alpha .2;}}

class NewPuff1 : Actor replaces BulletPuff
{
	Default
	{
		+NOBLOCKMAP
		+NOGRAVITY
		+NOCLIP
		Scale .2;
		RenderStyle "Add";
	}
	states
	{
	Spawn:
		TNT1 A 0 NODELAY
		{
			A_SpawnItemEx("PuffSmoke",zvel:frandom(.25,1));
			if(random(0,1))
				scale.x=-scale.x;
		}
		FX57 ABCDEFGHIJ 2 Bright A_FadeOut;
		Stop;
	}
}

class NewPuff2 : NewPuff1  //does soldier damage type
{
	Default
	{
		DamageType "SoldierDamage";
	}
}

class PuffSmoke : Actor
{
	Default
	{
		Projectile;
		+NOCLIP
		Scale .3;
		RenderStyle "Add";
		Alpha .67;
	}
	States
	{
	Spawn:
		WPXS ACEGIKMOQSUWYZ 2 A_FadeOut;
		Wait;
	}
}

//================
// Weapons & Ammo
//================

class Crowbar : ParanoidWeapon
{
	Default
	{
		Tag "Crowbar";
		Height 4;
		Weapon.Kickback 0;
		Inventory.PickupSound "misc/i_pkup";
		Inventory.PickupMessage "Picked up a Crowbar";
		Obituary "%k shoved %o's crowbar where the sun don't shine.";
		+WEAPON.MELEEWEAPON
		-WEAPON.NOALERT
		-WEAPON.AMMO_CHECKBOTH
		Inventory.Icon "i_cbar1";
	}
	States
	{
	Deselect:
		HWD1 ABCDEFGHIJKL 1;
		TNT1 A 0 A_Lower;
		Wait;
	Ready:
		TNT1 A 0;
		HWU1 ABCDEFGHIJKL 1;
		Goto Ready2;
	Fire:
		TNT1 A 0 A_Jump(256,"Fire1","Fire2","Fire3");
	Fire1:
		HWF1 A 2 A_JumpIfCloser(80,"FireFast1");
		HWF1 BC 2;
		HWF1 D 2 CrowbarHit;
		HWF1 EFGHIJK 2;
		Goto Ready2;
	FireFast1:
		HWF1 LMNO 1;
		HWF1 P 1 CrowbarHit;
		HWF1 QRSTUV 1;
		HWI1 A 2;
		Goto Ready2;
	Fire2:
		HWF1 W 2 A_JumpIfCloser(80,"FireFast2");
		HWF1 XYZ 2;
		HWF1 [ 2 CrowbarHit;
		HWF1 \] 2;
		HWF2 ABCDEF 2;
		Goto Ready2;
	FireFast2:
		HWF2 HIJKLM 1;
		HWF2 N 1 CrowbarHit;
		HWF2 OPQRSTU 1;
		Goto Ready2;
	Fire3:
		HWF2 V 2 A_JumpIfCloser(80,"FireFast3");
		HWF2 WXY 2;
		HWF2 Z 2 CrowbarHit;
		HWF2 [\] 2;
		HWF3 AB 2;
		HWF3 CDEFGHIJK 1;
		Goto Ready2;
	FireFast3:
		HWF3 LMNOP 1;
		HWF3 Q 1 CrowbarHit;
		HWF3 RSTUVWXYZ[\] 1;
		HWF4 A 1;
		Goto Ready2;
	}
	action void CrowbarHit()
	{
		if(player==null)
			return;
		int damage=3*random(1,18);
		for(int i=0;i<16;i++)
		{
			if(TryPunch(angle+i*(12./16),damage)||TryPunch(angle-i*(12./16),damage))
				return;
		}
		//didn't find any creatures, so try to strike any walls
		double slope=AimLineAttack(angle,80);
		LineAttack(angle,80,slope,damage,'Crowbar',"CrowbarPuff2",true);
	}
	private action bool TryPunch(double angle,int damage)
	{
		FTranslatedLineTarget t;
		double slope=AimLineAttack(angle,80,t);
		if(t.linetarget==null)
			return false;
		LineAttack(angle,80,slope,damage,'Crowbar',"CrowbarPuff2",true,t);
		if(t.linetarget==null)
			return false;
		return true;
	}
}

class CrowbarPuff2 : NewPuff1
{
	Default
	{
		+NOEXTREMEDEATH
		+PUFFONACTORS
		ActiveSound "halflife/weapons/CrowbarMiss";
	}
	states
	{
	Spawn:
		TNT1 A 4 NODELAY A_PlaySound("halflife/weapons/Crowbarhitbody",CHAN_WEAPON);
		Stop;
	Crash:
		TNT1 A 0 A_PlaySound("halflife/weapons/Crowbarhit",CHAN_WEAPON);
		Goto Super::Spawn;
	}
}

//=========
// Beretta
//=========

class PistolPickup : ParanoidWeaponGiver
{
	Default
	{
		Inventory.PickupMessage "You picked up a Beretta.";
		ParanoidWeaponGiver.Weapon1 "PistolHeldAmmo","BClip",17;
		DropItem "Beretta";
	}
}

class Beretta : ParanoidWeapon
{
	Default
	{
		Tag "Beretta";
		Radius 4;
		Height 4;
		Weapon.SelectionOrder 2000;
		Weapon.AmmoUse 1;
		Weapon.AmmoUse2 1;
		Weapon.AmmoType "BClip";
		Weapon.AmmoType2 "PistolHeldAmmo";
		Inventory.PickupMessage "You picked up a Beretta.";
		Obituary "%o was out-gunned by %k's Beretta.";
		Decal "BulletChip";
		Inventory.Icon "i_pist1";
	}
	States
	{
	Ready2:
		HWI1 A 1
		{
			if(CountInv("PistolHeldAmmo")<17&&CountInv("BClip"))
				A_WeaponReady(WRF_ALLOWRELOAD);
			else
				A_WeaponReady();
		}
		Loop;
	Fire:
		TNT1 A 0 A_JumpIfInventory("PistolHeldAmmo",1,2);
		HWI1 A 5 A_PlaySound("halflife/weapons/noammo",CHAN_WEAPON);
		Goto Reload;
		HWF1 A 1 A_PlaySound("halflife/weapons/pistol",CHAN_WEAPON);
		HWF1 B 1;
		HWF1 C 1
		{
			A_AlertMonsters();
			A_TakeInventory("PistolHeldAmmo",1);
			A_FireProjectile("GunSmallSmokeSpawner",0,0,7,5);
			A_SpawnItemEx("LighCheapHack");
			A_FireBullets(1,1,-1,5,"NewPuff1",0);
			WeaponRecoil(100);
		}
		HWF1 D 1;
		HWF1 EF 1 WeaponRecoil(-50);
		HWF1 GHIJ 1;
		HWF1 K 2 A_ReFire;
		HWF1 LMNOP 2;
		Goto Ready2;
	AltFire:
		TNT1 A 0 A_JumpIfInventory("PistolHeldAmmo",1,2);
		HWI1 A 5 A_PlaySound("halflife/weapons/noammo",CHAN_WEAPON);
		Goto Reload;
		HWF1 B 1 A_PlaySound("halflife/weapons/pistol",CHAN_WEAPON);
		HWF1 C 1
		{
			A_AlertMonsters();
			A_TakeInventory("PistolHeldAmmo",1);
			A_FireProjectile("GunSmallSmokeSpawner",0,0,7,5);
			A_SpawnItemEx("LighCheapHack");
			A_FireBullets(3,3,-1,5,"NewPuff1",0);
			WeaponRecoil(100);
		}
		HWF1 D 1;
		HWF1 EF 1 WeaponRecoil(-50);
		HWF1 GH 1;
		HWF1 I 1 A_ReFire;
		HWF1 J 1;
		HWF1 KLMNOP 2;
		Goto Ready2;
	Reload:
		TNT1 A 0 A_JumpIfInventory("BClip",1,1);
		Goto Ready2;
		HWI1 A 5;
		HWR1 ABCCDEFFGHIIJKLLMNOOPQRR 1;
		HWR1 S 1
		{
			A_PlaySound("halflife/weapons/reload1",CHAN_WEAPON);
			while(CountInv("PistolHeldAmmo")<17&&CountInv("BClip"))
			{
				A_TakeInventory("BClip",1,TIF_NOTAKEINFINITE);
				A_GiveInventory("PistolHeldAmmo");
			}
		}
		HWR1 TUUVWXXYZ[[\] 1;
		HWR2 AABCDDE 1;
		HWR2 F 1 A_PlaySound("halflife/weapons/reload2",CHAN_WEAPON);
		HWR2 GGHIJJK 1;
		Goto Ready2;
	}
}
class PistolHeldAmmo : Ammo
{
	Default
	{
		+INVENTORY.IGNORESKILL
		Inventory.MaxAmount 17;
	}
}

//====================
// Beretta Clip
//====================

class BClip : Ammo
{
	Default
	{
		Tag "9mm";
		Radius 8;
		Height 4;
		Inventory.PickupSound "misc/w_pkup";
		Inventory.PickupMessage "Picked up a clip.";
		Inventory.Amount 17;
		Inventory.MaxAmount 250;
		Ammo.BackpackAmount 17;
		Ammo.BackpackMaxAmount 400;
		Inventory.Icon "i_bul1";
	}
	States
	{
	Spawn:
		POSS A -1;
		Stop;
	}
}

//=====================
// Python (357 Magnum)
//=====================

class R357Pickup : ParanoidWeaponGiver
{
	Default
	{
		Inventory.PickupMessage "A .357 Magnum! You Feelin' Lucky, Punk?";
		ParanoidWeaponGiver.Weapon1 "MagnumHeldAmmo","PythonAmmo",6;
		DropItem "Python";
	}
}

class Python : ParanoidWeapon
{
	Default
	{
		Tag "Python";
		Radius 4;
		Height 4;
		Weapon.Kickback 100;
		Weapon.SelectionOrder 1500;
		Weapon.AmmoUse 1;
		Weapon.AmmoUse2 1;
		Weapon.AmmoType "PythonAmmo";
		Weapon.AmmoType2 "MagnumHeldAmmo";
		Inventory.PickupMessage "A .357 Magnum! You Feelin' Lucky, Punk?";
		Obituary "%o's armor was pierced by %k's Python.";
		Decal "BulletChip";
		Inventory.Icon "i_pist2";
	}
	States
	{
	Ready2:
		HWI1 A 1
		{
			if(waterlevel==3)
				A_WeaponReady(WRF_NOFIRE);
			else if(CountInv("MagnumHeldAmmo")<6&&CountInv("PythonAmmo"))
				A_WeaponReady(WRF_ALLOWRELOAD);
			else
				A_WeaponReady();
		}
		Loop;
	Fire:
		TNT1 A 0 A_JumpIfInventory("MagnumHeldAmmo",1,2);
		HWI1 A 5 A_PlaySound("halflife/weapons/noammo",CHAN_WEAPON);
		Goto Reload;
		HWF1 AB 1;
		HWF1 C 1
		{
			A_PlaySound("halflife/weapons/magnumshot",CHAN_WEAPON);
			A_AlertMonsters();
			for(int i=0;i<2;i++)
				A_FireProjectile("GunSmallSmokeSpawner",0,0,6,5);
			A_SpawnItemEx("LighCheapHack");
			A_FireBullets(0,0,1,85,"BulletPuff",0);
			A_TakeInventory("MagnumHeldAmmo",1);
			WeaponRecoil(450);
		}
		HWF1 DEFGHIJKL 1 WeaponRecoil(-50);
		HWF1 MNOPQRSTUVWXYZ[\] 1;
		HWI1 A 16;
		HWI1 A 0 A_CheckReload;
		Goto Ready2;
	Flash:
		TNT1 A 4 A_Light1;
		TNT1 A 3 A_Light2;
		Goto LightDone;
	Reload:
		HWR1 ABCDEFGHIJKLMNOPQRSTUVWXYZ[\] 1;
		HWR2 ABCDEFGHIJKLMNOPQRSTUVWXYZ[\] 1;
		HWR3 ABCDEFGHIJKLMNOPQR 1;
		HWR3 S 1
		{
			A_PlaySound("halflife/weapons/m357reload",CHAN_WEAPON);
			while(CountInv("MagnumHeldAmmo")<6&&CountInv("PythonAmmo"))
			{
				A_TakeInventory("PythonAmmo",1,TIF_NOTAKEINFINITE);
				A_GiveInventory("MagnumHeldAmmo");
			}
		}
		HWR3 TUVWXYZ[\] 1;
		HWR4 ABCDEFGHIJ 1;
		Goto Ready2;
	}
}
class MagnumHeldAmmo : Ammo
{
	Default
	{
		+INVENTORY.IGNORESKILL
		Inventory.MaxAmount 6;
	}
}

//=============
// Python Ammo
//=============

class PythonAmmo : Ammo
{
	Default
	{
		Tag ".357";
		Radius 6;
		Height 4;
		Inventory.PickupSound "misc/w_pkup";
		Inventory.PickupMessage "Picked up a box of .357 calibers.";
		Inventory.Amount 12;
		Inventory.MaxAmount 36;
		Ammo.BackpackAmount 6;
		Ammo.BackpackMaxAmount 50;
		Inventory.Icon "i_bul2";
	}
	States
	{
	Spawn:
		POSS A -1;
		Stop;
	}
}

class PythonAmmo1 : PythonAmmo
{
	Default
	{
		Radius 4;
		Inventory.PickupMessage "Picked up six 357 caliber bullets.";
		Inventory.Amount 6;
	}
}

//===================
// Paranoid Shotgun
//===================

class ShotgunPickup : ParanoidWeaponGiver
{
	Default
	{
		Inventory.PickupMessage "You got the shotgun!";
		ParanoidWeaponGiver.Weapon1 "ShotgunHeldAmmo","PShell",8;
		DropItem "PShotgun";
	}
}
//=============================
// Paranoid Shotgun (Vertical)
//=============================

class Pshotgun1 : ShotgunPickup
{
	Default
	{
		Radius 4;
		Height 32;
	}
}

class Pshotgun : ParanoidWeapon
{
	bool reloading;
	Default
	{
		Tag "Shotgun";
		Height 4;
		Weapon.SelectionOrder 900;
		Weapon.AmmoUse 1;
		Weapon.AmmoUse2 1;
		Weapon.AmmoType "PShell";
		Weapon.AmmoType2 "ShotgunHeldAmmo";
		Inventory.PickupMessage "You got the shotgun!";
		Obituary "%o swallowed %k's lead pellets.";
		Decal "BulletChip";
		Inventory.Icon "i_sgun1";
	}
	States
	{
	Deselect:
		HWU1 A 1 {invoker.reloading=0;}
		HWU1 BCDEFGHIJ 1;
		TNT1 A 0 A_Lower;
		Wait;
	Ready:
		TNT1 A 0;
		HWU1 JIHGFEDCBA 1;
	Ready2:
		HWI1 A 0 {invoker.reloading=0;}
		HWI1 A 1
		{
			if(waterlevel==3)
				A_WeaponReady(WRF_NOFIRE);
			else if(CountInv("ShotgunHeldAmmo")<8&&CountInv("PShell"))
				A_WeaponReady(WRF_ALLOWRELOAD);
			else
				A_WeaponReady();
		}
		Wait;
	Fire:
		TNT1 A 0 A_JumpIf(invoker.reloading,"ReloadDone");
		TNT1 A 0 A_JumpIfInventory("ShotgunHeldAmmo",1,2);
		HWI1 A 5 A_PlaySound("halflife/weapons/noammo",CHAN_WEAPON);
		Goto Reload;
		HWF1 A 1
		{
			A_PlaySound("halflife/weapons/shotgunsingle",CHAN_WEAPON);
			A_AlertMonsters();
			for(int i=0;i<2;i++)
				A_FireProjectile("GunSmallSmokeSpawner",0,0,4,6);
			A_SpawnItemEx("LighCheapHack");
			A_TakeInventory("ShotgunHeldAmmo",1);
			A_FireBullets(3,3,8,5,"NewPuff1",0);
			WeaponRecoil(350);
		}
		HWF1 B 1;
		HWF1 CDEFGHI 1 WeaponRecoil(-50);
		HWF1 JKLMN 1;
		HWF1 O 2 A_PlaySound("halflife/weapons/shotgunpump",CHAN_WEAPON);
		HWF1 PQRSTUVWXYZ[\] 2;
		HWF2 AB 2;
		HWF2 A 0 A_CheckReload;
		Goto Ready2;
	AltFire:
		TNT1 A 0 A_JumpIf(invoker.reloading,"ReloadDone");
		TNT1 A 0 A_JumpIf(CountInv("ShotgunHeldAmmo")<2,"Fire");	//if less than two, will shoot only one
		HWF2 C 1
		{
			A_FireBullets(10,10,20,5,"NewPuff1",0);
			A_PlaySound("halflife/weapons/shotgundouble",CHAN_WEAPON);
			WeaponRecoil(550);
			for(int i=0;i<2;i++)
				A_FireProjectile("GunSmallSmokeSpawner",0,0,4,5);
			A_AlertMonsters();
			A_SpawnItemEx("LighCheapHack");
			A_TakeInventory("ShotgunHeldAmmo",2);
		}
		HWF2 D 1;
		HWF2 EFGHIJKLMNO 1 WeaponRecoil(-50);
		HWF2 PQRSTUVWXYZ[\] 1;
		HWF3 ABC 2;
		HWF3 D 2 A_PlaySound("halflife/weapons/shotgunpump",CHAN_WEAPON);
		HWF3 EFGHIJKLMNOPQ 2;
		HWF3 Q 0 A_CheckReload;
		Goto Ready2;
	Reload:
		HWI1 A 5 {invoker.reloading=1;}
	ReloadLoop:
		HWR1 ABCDEF 2;
		HWR1 G 2
		{
			A_PlaySound("halflife/weapons/reload1",CHAN_WEAPON);
			A_TakeInventory("PShell",1,TIF_NOTAKEINFINITE);
			A_GiveInventory("ShotgunHeldAmmo",1);
		}
		HWR1 H 2;
		HWR1 I 2 A_WeaponReady(WRF_NOBOB);
		HWR1 A 0 A_JumpIfInventory("ShotgunHeldAmmo",0,"ReloadDone");
		HWR1 A 0 A_JumpIfInventory("PShell",1,"ReloadLoop");
	ReloadDone:
		HWR1 JKLMNO 2;
		HWR1 P 2 A_PlaySound("halflife/weapons/shotgunpump",CHAN_WEAPON);
		HWR1 QRSTUVWXYZ[ 2;
		HWR1 \ 2 {invoker.reloading=0;}
		Goto Ready2;
	}
}
class ShotgunHeldAmmo : Ammo
{
	Default
	{
		+INVENTORY.IGNORESKILL
		Inventory.MaxAmount 8;
	}
}

//=========================
// Paranoid Shotgun Shells
//=========================

class PShell : Ammo
{
	Default
	{
		Tag "Shell";
		Radius 4;
		Height 4;
		Inventory.PickupSound "misc/w_pkup";
		Inventory.PickupMessage "Picked up 4 shotgun shells.";
		Inventory.Amount 4;
		Inventory.MaxAmount 125;
		Ammo.BackpackAmount 4;
		Inventory.Icon "i_shel1";
	}
	States
	{
	Spawn:
		POSS A -1;
		Stop;
	}
}

//===========================
// Paranoid Shotgun Shellbox
//===========================

class PShellBox : PShell
{
	Default
	{
		Radius 6;
		Inventory.PickupMessage "Picked up a box of shotgun shells.";
		Inventory.Amount 12;
	}
}

//===================
// 9mm Assault Rifle
//===================

class M16Pickup : ParanoidWeaponGiver
{
	Default
	{
		Inventory.PickupMessage "You got the 9mm Assault Rifle";
		ParanoidWeaponGiver.Weapon1 "M16HeldAmmo","ARClip",25;
		DropItem "ARifle";
	}
	override bool TryPickup(in out Actor toucher)
	{
		if(WeaponGiver.TryPickup(toucher))
		{
			toucher.A_GiveInventory(Weapon1,Weapon1Amount);
			toucher.A_GiveInventory("M16Gren");
			GoAwayAndDie();
			return true;
		}
		if(toucher.A_GiveInventory(Weapon2,Weapon1Amount))
		{
			GoAwayAndDie();
			return true;
		}
		return false;
	}
}

//=============================
// 9mm Assault Rifle (Vertical)
//=============================

class ARifle1 : M16Pickup
{
	Default
	{
		Radius 4;
		Height 32;
	}
}

class ARifle : ParanoidWeapon
{
	Default
	{
		Tag "Assault Rifle";
		Height 4;
		Weapon.SelectionOrder 1000;
		Weapon.AmmoUse 1;
		Weapon.AmmoUse2 1;
		Weapon.AmmoType "ARClip";
		Weapon.AmmoType2 "M16ClipGren";
		Inventory.PickupMessage "You got the 9mm Assault Rifle";
		Obituary "%o felt %k's m16.";
		Decal "BulletChip";
		Inventory.Icon "i_arifl1";
	}
	States
	{
	Deselect:
		HWU1 ABCDEFGHIJ 1;
		TNT1 A 0 A_Lower;
		Wait;
	Ready:
		TNT1 A 0;
		HWU1 JIHGFEDCBA 1;
	Ready2:
		HWI1 A 1
		{
			if(waterlevel==3)
				A_WeaponReady(WRF_NOFIRE);
			else if(CountInv("M16HeldAmmo")<50&&CountInv("ARClip"))
				A_WeaponReady(WRF_ALLOWRELOAD);
			else
				A_WeaponReady();
		}
		Loop;
	Fire:
		TNT1 A 0 A_JumpIfInventory("M16HeldAmmo",1,2);
		HWI1 A 5 A_PlaySound("halflife/weapons/noammo",CHAN_WEAPON);
		Goto Reload;
		HWF1 B 1
		{
			A_SpawnItemEx("LighCheapHack");
			A_PlaySound("halflife/weapons/machinegunshot",CHAN_WEAPON);
			A_AlertMonsters();
			A_FireBullets(3,3,-1,5,"NewPuff1",0);
			A_FireProjectile("GunSmallSmokeSpawner",0,0,6,4);
			A_TakeInventory("M16HeldAmmo",1);
			WeaponRecoil(100);
		}
		HWF1 CE 1 WeaponRecoil(-50);
		HWF1 F 1;
		TNT1 A 0 A_CheckReload;
		Goto Ready2;
	AltFire:
		TNT1 A 0 A_JumpIfInventory("M16Gren",1,2);
		HWI1 A 12 A_PlaySound("halflife/weapons/noammo",CHAN_WEAPON);
		Goto Ready2;
		HWF1 H 1
		{
			for(int i=0;i<2;i++)
				A_FireProjectile("GunSmallSmokeSpawner",0,0,6,6);
			A_PlaySound("halflife/weapons/grenadelaunch",CHAN_WEAPON);
			actor gren=A_FireProjectile("M16Grenade",0,0,5,0,FPF_NOAUTOAIM);
			if(gren!=null)
				gren.vel.z+=2;
			A_AlertMonsters();
			WeaponRecoil(400);
			A_SpawnItemEx("LighCheapHack");
			A_TakeInventory("M16Gren",1,TIF_NOTAKEINFINITE);
		}
		HWF1 I 1;
		HWF1 JKLMNOPQ 1 WeaponRecoil(-50);
		HWF1 RSTUVWXYZ[\] 1;
		HWF2 ABCDEFGHIJKL 1;
		TNT1 A 0 A_CheckReload;
		Goto Ready2;
	Reload:
		HWI1 A 0 A_JumpIfInventory("ARClip",1,1);
		Goto Ready2;
		HWR1 ABCDEFGHI 1;
		TNT1 S 0
		{
			A_PlaySound("halflife/weapons/m16cliprelease",CHAN_WEAPON);
			while(CountInv("M16HeldAmmo")<50&&CountInv("ARClip"))
			{
				A_TakeInventory("ARClip",1,TIF_NOTAKEINFINITE);
				A_GiveInventory("M16HeldAmmo");
			}
		}
		HWR1 JKLMNOPQRSTUVWXYZ[ 2;
		HWR1 \] 1;
		HWR2 A 1 A_PlaySound("halflife/weapons/m16clipinsert",CHAN_WEAPON);
		HWR2 BCDEFGHIJKLMNOPQ 1;
		Goto Ready2;
	}
}
class M16HeldAmmo : Ammo
{
	Default
	{
		+INVENTORY.IGNORESKILL
		Inventory.MaxAmount 50;
	}
}
class M16ClipGren : Ammo
{
	Default
	{
		+INVENTORY.IGNORESKILL
		Inventory.MaxAmount 70;
	}
}
class M16Grenade : Actor
{
	Default
	{
		Projectile;
		Speed 20;
		Damage 20;
		Radius 10;
		Height 20;
		-NoGravity
		Gravity .25;
		DeathSound "halflife/weapons/randomexplo";
		Decal "Scorch";
	}
	States
	{
	Spawn:
		GRNL A 3;
		GRNL A 1
		{
			for(int i=0;i<2;i++)
				A_SpawnItemEx("GrenadeTrail",random(1,-3),random(3,-3),2+random(3,-3));
		}
		Wait;
	Death:
		TNT1 A 1
		{
			A_Explode(170,140);
			A_SpawnItemEx("NewExplosionMedium");
		}
		Stop;
	}
}

class GrenadeTrail : Actor
{
	Default
	{
		Projectile;
		+NOINTERACTION
		Scale .35;
		RenderStyle "Add";
		Alpha .67;
	}
	States
	{
	Spawn:
		WPXS ABCDEFGIHJKLMNOPQRSTUVWXYZ 1 NODELAY A_FadeOut(.03);
		Wait;
	}
}

//====================
// Assault Rifle Clip
//====================

class ARClip : Ammo
{
	Default
	{
		Tag "9mm AR";
		Radius 8;
		Height 4;
		Inventory.PickupSound "misc/w_pkup";
		Inventory.PickupMessage "Picked up a clip.";
		Inventory.Amount 25;
		Inventory.MaxAmount 250;
		Ammo.BackpackAmount 25;
		Ammo.BackpackMaxAmount 400;
		Inventory.Icon "i_bul3";
	}
	States
	{
	Spawn:
		POSS A -1;
		Stop;
	}
}

//========================
// Assault Rifle Ammo Box
//========================

class ARAmmo : ARClip
{
	Default
	{
		Radius 12;
		Height 8;
		Inventory.PickupMessage "Picked up a box of 9mm bullets.";
		Inventory.Amount 50;
	}
}

//=========
// M16Gren
//=========

class M16Gren : Ammo
{
	Default
	{
		Tag "Grenade";
		Inventory.PickupMessage "Picked up two M16 Grenades.";
		Inventory.Amount 2;
		Inventory.MaxAmount 10;
		Ammo.BackpackAmount 2;
		Ammo.BackpackMaxAmount 20;
		Inventory.Icon "i_gren2";
	}
	States
	{
	Spawn:
		POSS A -1;
		Stop;
	}
}

//=====================
// RPG Launcher
//=====================

class RPGLauncher : ParanoidWeapon
{
	Default
	{
		Tag "RPG Launcher";
		Radius 32;
		Height 8;
		+FLOORCLIP
		-WEAPON.NOALERT
		-WEAPON.AMMO_CHECKBOTH
		Inventory.PickupMessage "You just got an RPG Launcher! Let's blow things up!";
		Weapon.AmmoUse 1;
		Weapon.AmmoGive 2;
		Weapon.AmmoType "RPGAmmo";
		Inventory.Icon "i_rlau1";
	}
	States
	{
	Deselect:
		HWU1 A 0 A_JumpIf(!CountInv("RPGAmmo"),"DeselectEmpty");
		Goto Super::Deselect;
	DeselectEmpty:
		HWU1 OPQRSTUVWXYZ[\ 1;
		TNT1 A 0 A_Lower;
		Wait;
	Ready:
		TNT1 A 0 A_JumpIf(!CountInv("RPGAmmo"),"ReadyEmpty");
		Goto Super::Ready;
		HWU1 \[ZYXWVUTSRQPO 1;
	Ready2:
		TNT1 A 0 A_JumpIf(!CountInv("RPGAmmo"),2);
		HWI1 A 1 A_WeaponReady;
		Loop;
		HWI1 B 1 A_WeaponReady;
		Loop;
	Fire:
		HWF1 A 1
		{
			A_FireProjectile("HLRocket",0,1,5,5);
			WeaponRecoil(800);
			A_PlaySound("halflife/weapons/RPGFire",CHAN_WEAPON);
			A_SpawnItemEx("LighCheapHack");
		}
		HWF1 BC 1;
		HWF1 A 0 A_Recoil(7);
		HWF1 DEFGHIJK 1 WeaponRecoil(-100);
		HWF1 LMN 1;
		HWF1 N 9;
		HWR1 A 1 A_CheckReload;
		HWR1 BCDEFGHIJKLMNOPQRSTUVWXYZ[\] 1;
		HWR2 ABCDEFGHIJKLMNOPQRSTUVWXYZ[\] 1;
		Goto Ready2;
	}
}

class HLRocket : Actor
{
	Default
	{
		Radius 5;
		Height 5;
		Speed 35;
		Damage 70;
		PROJECTILE;
		+EXTREMEDEATH
		+ROCKETTRAIL
		+FORCERADIUSDMG
		DeathSound "halflife/weapons/randomexplo";
		Decal "HugeScorch";
	}
	States
	{
	Spawn:
		POSS A 1 Bright
		{
			A_SpawnItemEx("RPGTrail2",random(3,-3),random(3,-3),random(3,-3),zvel:frandom(.25,1.25));
			for(int i=0;i<2;i++)
				A_SpawnItemEx("RPGTrail1",random(3,-3),random(3,-3),random(3,-3),zvel:frandom(.25,1.25));
		}
		Loop;
	Death:
		TNT1 A 20
		{
			A_Explode(512,256);
			A_SpawnItemEx("NewExplosionMediumBig");
			Radius_Quake(8,20,0,35,0);
		}
		Stop;
	}
}

class RPGTrail1 : Actor
{
	Default
	{
		+NOCLIP
		+NOGRAVITY
		RenderStyle "Add";
		Alpha .6;
		Scale .4;
	}
	States
	{
	Spawn:
		TNT1 A 2;
	 	SPIR KLMNO 3;
		Stop;
	}
}

class RPGTrail2 : RPGTrail1
{
	Default
	{
		Scale .3;
	}
	States
	{
	Spawn:
		TNT1 A 2;
		WPXS ACEGIKMOQSUWY[] 1;
		Stop;
	}
}

//===================
// RPG Launcher Ammo
//===================

class RPGAmmo : Ammo
{
	Default
	{
		Tag "RPG";
		Radius 4;
		Height 20;
		Inventory.PickupSound "misc/w_pkup";
		Inventory.PickupMessage "Picked up an RPG round.";
		Inventory.MaxAmount 10;
		Ammo.BackpackAmount 2;
		Ammo.BackpackMaxAmount 20;
		Inventory.Icon "i_rock2";
	}
	States
	{
	Spawn:
		POSS A -1;
		Stop;
	}
}

class BoltHeld : Ammo
{
	Default
	{
		+INVENTORY.IGNORESKILL
		Inventory.MaxAmount 5;
	}
}

//=============
// Cross-Bow
//=============

class XBow : ParanoidWeapon
{
	bool zoomtoken;
	Default
	{
		Radius 16;
		Height 8;
		+FLOORCLIP
		Weapon.AmmoType "Xbowbolts";
		Weapon.AmmoType2 "BoltHeld";
		Weapon.AmmoGive 5;
		Weapon.AmmoUse 1;
		Weapon.AmmoUse2 1;
		Inventory.PickupMessage "You got the crossbow! Snipe and impale!";
		weapon.upsound "";
		Tag "Crossbow";
		+WEAPON.NOAUTOFIRE
		Inventory.Icon "i_xbow1";
	}
	States
	{
	Deselect:
		HWD1 A 2
		{
			invoker.ZoomToken=0;
			A_ZoomFactor(1.0,1);
		}
		HWD1 BCDEFGHIJKLMNO 2;
		TNT1 A 0 A_Lower;
		Wait;
	Ready:
		TNT1 A 0;
		HWU1 ABCDEFGHIJKLMNO 2;
		TNT1 A 0 A_Jump(256,"Ready2");
	Ready2:
		HWI1 A 0 A_JumpIf(invoker.ZoomToken,4);
		HWI1 A 0 A_JumpIf(!CountInv("BoltHeld"),2);
		HWI1 A 1 A_CrossbowReady();
		Loop;
		HWI1 B 1 A_CrossbowReady();
		Loop;
		R016 A 1 A_CrossbowReady();
		Loop;
	Fire:
		"####" # 0 A_JumpIfInventory("BoltHeld",1,2);
		"####" # 5 A_PlaySound("halflife/weapons/noammo",CHAN_WEAPON);
		Goto Reload;
		TNT1 A 0
		{
			A_TakeInventory("BoltHeld",1);
			A_PlaySound("HLCrossbow/Fire",CHAN_WEAPON);
			A_FireProjectile("XbowBolt",0,0,4,3);
			A_SetPitch(pitch-2.8);
			//Fire1 (shoot and recock)
			if(CountInv("BoltHeld"))
			{
				if(invoker.ZoomToken)
					return resolvestate("Fire1Zoom");
				else
					return resolvestate("Fire1");
			}
			//Fire2 (shoot, reload, recock)
			else if(CountInv("Xbowbolts"))
			{
				if(invoker.ZoomToken)
					return resolvestate("Fire2Zoom");
				else
					return resolvestate("Fire2");
			}
			//Fire3 (shoot, no reload or recock)
			else
			{
				if(invoker.ZoomToken)
					return resolvestate("Fire3Zoom");
				else
					return resolvestate("Fire3");
			}
			return state(null);
		}
	Fire1:
		HWF1 BD 1;
		HWF1 FHJLNPR 1 A_SetPitch(pitch+0.4);
		HWF1 TVX 1;
		HWF1 Z 1 A_PlaySound("HLCrossbow/Reload",CHAN_WEAPON);
		HWF1 \ 1;
		HWF2 ACEGIKMOQSUWY[] 1;
		HWF3 BDFHJLNPRTVXZ\ 1;
		HWF4 AC 1;
		Goto Ready2;
	Fire1Zoom:
		R016 A 2;
		R016 AAAAAAA 1 A_SetPitch(pitch+0.4);
		R016 A 3;
		R016 A 35 A_PlaySound("HLCrossbow/Reload",CHAN_WEAPON);
		Goto Ready2;
	Fire2:
		HWF5 EF 1;
		HWF5 GHIJKLM 1 A_SetPitch(pitch+0.4);
		HWF5 NO 1;
	Fire2Cont:
		HWF5 P 1 A_CrossbowZoomOut();
		HWF5 QRSTUVWXYZ[\] 1;
		HWF6 ABCDEFGHIJKLMNOPQRSTUVWXYZ[\] 1;
		HWF7 A 1 A_ReloadCrossbow;
		HWF7 BCDEFGHIJKLMNOP 1;
		HWF7 Q 1 A_PlaySound("HLCrossbow/Reload",CHAN_WEAPON);
		HWF7 RSTUVWXYZ[\] 1;
		HWF8 ABCDEFGHIJKLMNOPQRSTUVWXYZ[\] 1;
		HWF9 ABCDEFGHIJKLMNOPQRSTUVWXY 1;
		Goto Ready2;
	Fire2Zoom:
		R016 A 2;
		R016 AAAAAAA 1 A_SetPitch(pitch+0.4);
		R016 A 2;
		Goto Fire2Cont;
	Fire3:
		HWF9 Z[ 1;
		HWF9 \] 1 A_SetPitch(pitch+0.4);
		HWF0 ABCDE 1 A_SetPitch(pitch+0.4);
		HWF0 FGHIJK 1;
		Goto Ready2;
	Fire3Zoom:
		R016 A 2;
		R016 AAAAAAA 1 A_SetPitch(pitch+0.4);
		R016 A 6;
		Goto Ready2;
	Reload:
		HWR1 A 1 A_CrossbowZoomOut;
		HWR1 BCDEFGHIJKLMNOPQRSTUVWXYZ[\] 1;
		HWR2 ABCDEFGHIJKLMNOPQRSTUVW 1;
		HWR2 X 1 A_ReloadCrossbow;
		HWR2 YZ[\] 1;
		HWR3 ABCDEFGHIJ 1;
		HWR3 K 1 A_PlaySound("HLCrossbow/Reload",CHAN_WEAPON);
		HWR3 LMNOPQRSTUVWXYZ[\] 1;
		HWR4 ABCDEFGHIJKLMNOPQRSTUVWXYZ[\] 1;
		HWR5 ABCDEFGHIJKLMNOPQRS 1;
		Goto Ready2;
	AltFire:
		R016 A 1
		{
			if(invoker.ZoomToken)
				A_CrossbowZoomOut();
			else
			{
				A_PlaySound("BS/Headhunter/ZoomIn",7);
				invoker.ZoomToken=1;
				A_ZoomFactor(5);
			}
		}
		Goto Ready2;
	}
	action void A_CrossbowReady()
	{
		if(CountInv("Xbowbolts")&&CountInv("BoltHeld")<5)
			A_WeaponReady(WRF_ALLOWRELOAD);
		else
			A_WeaponReady();
	}
	action void A_ReloadCrossbow()
	{
		while(CountInv("BoltHeld")<5&&CountInv("Xbowbolts"))
		{
			A_TakeInventory("Xbowbolts",1,TIF_NOTAKEINFINITE);
			A_GiveInventory("BoltHeld");
		}
	}
	action void A_CrossbowZoomOut()
	{
		A_PlaySound("BS/Headhunter/ZoomOut",7);
		invoker.ZoomToken=0;
		A_ZoomFactor(1,1);
	}
}

class XBowBolts : Ammo
{
	Default
	{
		+FLOORCLIP
		Radius 8;
		Height 4;
		inventory.pickupmessage "Picked up a clip of crossbow bolts";
		inventory.pickupsound "misc/w_pkup";
		inventory.amount 5;
		inventory.maxamount 50;
		ammo.backpackamount 5;
		inventory.icon "i_bul1";	//Change when proper icon is inserted into file
	}
	states
	{
	Spawn:
		POSS A -1;
		Stop;
	}
}

class XBowBoltSingle : XBowBolts
{
	Default
	{
		inventory.pickupmessage "Picked up a crossbow bolt";
		inventory.amount 1;
	}
}

class XbowBolt : FastProjectile
{
	Default
	{
		PROJECTILE;
		Radius 3;
		Height 5;
		Speed 80;
		Damage 50;
		DeathSound "weapons/crbreak";
		Decal "BulletChip";
		+BLOODSPLATTER
	}
	States
	{
	Spawn:
		HWXB A -1;
		Loop;
	Xdeath:
		TNT1 A 4 A_PlaySound("HLCrossbow/Hitbody",7);
		Stop;
	Death:
		TNT1 A 4 A_PlaySound("HLCrossbow/Hitwall",7);
		Stop;
	}
}

class Missile : Rocket
{
//	Speed 40
}

//=============
// Gluon Gun
// Developed by Major Cooke for AeOD; modified by DBThanatos & Kappes Buur
//=============

class GluonHeldAmmo : Ammo
{
	Default
	{
		+INVENTORY.IGNORESKILL
		Inventory.MaxAmount 40;
	}
}

//***************************************************************

class GluonGun : ParanoidWeapon
{
	int GluonSoundCountdown;
	Default
	{
		Weapon.AmmoUse 1;
		Weapon.AmmoUse2 1;
		Weapon.AmmoType "AECell";
		Weapon.AmmoType2 "GluonHeldAmmo";
		Weapon.AmmoGive 40;
		Weapon.UpSound "weapons/plasma/draw";
		Weapon.SelectionOrder 10333;
		Inventory.PickupMessage "You found the Gluon Gun.";
		+FLOORCLIP
		Tag "Gluon gun";
		Scale .8;
		Inventory.Icon "i_gluon1";
	}
	States
	{
	Ready2:
		HWI1 A 1
		{
			if(waterlevel==3)
				A_WeaponReady(WRF_NOFIRE);
			else if(CountInv("GluonHeldAmmo")<40&&CountInv("AECell"))
				A_WeaponReady(WRF_ALLOWRELOAD);
			else
				A_WeaponReady();
		}
		Loop;
	Fire:
		HWI1 A 0 A_JumpIfInventory("GluonHeldAmmo",1,1);
		Goto Reload;
		HWI1 A 0
		{
			invoker.GluonSoundCountdown=35;
			A_PlaySound("weapons/gluonstart",CHAN_WEAPON);
		}
	ShotLoop:
		HWI1 A 1 Bright
		{
			if(!CountInv("GluonHeldAmmo"))
			{
				A_PlaySound("halflife/weapons/noammo",6);
				return resolvestate("PowerDown");
			}
			A_AlertMonsters();
			A_TakeInventory("GluonHeldAmmo",1,TIF_NOTAKEINFINITE);
			A_FireProjectile("GluonPrimaryBurst",0,0,4,2);
			A_FireProjectile("GluonFire",0,0,4,2);
			A_FireProjectile("GluonFire2",0,0,4,2);
			A_FireProjectile("GluonFire3",0,0,4,2);
			return state(null);
		}
		HWI1 A 1 BRIGHT A_FireProjectile("GluonFakeBurst",0,0,4,2);
		HWI1 A 1 BRIGHT
		{
			A_FireProjectile("GluonPrimaryBurst",0,0,4,2);
			A_FireProjectile("GluonFire4",0,0,4,2);
			A_FireProjectile("GluonFire5",0,0,4,2);
		}
		HWI1 A 1 BRIGHT A_FireProjectile("GluonFakeBurst",0,0,4,2);
		HWI1 A 0
		{
			invoker.GluonSoundCountdown--;
			if(!invoker.GluonSoundCountdown)
				A_PlaySound("weapons/gluonrun",CHAN_WEAPON,1,1);
		}
		HWI1 A 0 A_ReFire("ShotLoop");
	PowerDown:
		HWI1 A 6 A_PlaySound("weapons/gluonoff",CHAN_WEAPON);
		Goto Ready2;
	Reload:
		HWI1 A 8;
		HWR1 ABCDEFGHIJKLMNOPQRSTU 1;
		HWR1 V 0 A_JumpIfInventory("AECell",1,1);
		Goto Empty;
		HWR1 V 1
		{
			A_PlaySound("halflife/weapons/reload1",CHAN_WEAPON);
			while(CountInv("GluonHeldAmmo")<40&&CountInv("AECell"))
			{
				A_TakeInventory("AECell",1,TIF_NOTAKEINFINITE);
				A_GiveInventory("GluonHeldAmmo");
			}
		}
		HWR1 WXYZ[\] 1;
		HWR2 A 1;
		HWR2 B 1 A_PlaySound("halflife/weapons/reload2",CHAN_WEAPON);
		HWR2 CDEFGHIJKLMNOPQRSTUVWXYZ[\] 1;
		HWR3 ABC 1;
		Goto Ready2;
	Empty:
		HWR1 V 1 A_PlaySound("halflife/weapons/noammo",CHAN_WEAPON);
		HWR1 WXYZ[\] 1;
		HWR2 ABCDEFGHIJKLMNOPQRSTUVWXYZ[\] 1;
		HWR3 ABC 1;
		Goto Ready2;
	}
}

//=========================================
//The main projectiles fired. Their all parents of GluonPrimaryBurst with the only difference
//being the outer-trail spawn locations. I'm going for a spiral after all...
//Skip past GluonPrimaryBurst12 for the effects.
//=========================================

class GluonPrimaryBurst : Actor
{
	int life[2];
	Default
	{
		Speed 2;
		DamageFunction (random(1,6));
		Radius 2;
		Height 2;
		Scale .75;
		Projectile;
		+DONTREFLECT
		+EXTREMEDEATH
		+FORCERADIUSDMG
		+NODAMAGETHRUST
		+SEEKERMISSILE
		+SKYEXPLODE
		+EXPLODEONWATER
		+NOTIMEFREEZE
		DamageType "PlasmaDisint";
	}
	States
	{
	Spawn:
		TNT1 A 0 NODELAY A_SpawnItemEx("GluonSpiral",0,0,8,vel.x,vel.y,vel.z,0,SXF_ABSOLUTEMOMENTUM|SXF_TRANSFERPOINTERS);
		TNT1 A 0 A_Jump(256,"Movement");
	Movement:
		TNT1 A 0 A_JumpIf(life[0]>=25000,"Death");
		//This must be done multiple times, or else it will jump beyond walls. This could
		//easily cause an engine overload.
		TNT1 A 0 A_Warp(AAPTR_DEFAULT,vel.x,vel.y,vel.z,0,WARPF_ABSOLUTEOFFSET,1);
		Goto MoveOut;
		TNT1 A 0 A_Warp(AAPTR_DEFAULT,vel.x,vel.y,vel.z,0,WARPF_ABSOLUTEOFFSET,1);
		Goto MoveOut;
		TNT1 A 0 A_Warp(AAPTR_DEFAULT,vel.x,vel.y,vel.z,0,WARPF_ABSOLUTEOFFSET,1);
		Goto MoveOut;
		TNT1 A 0 A_Warp(AAPTR_DEFAULT,vel.x,vel.y,vel.z,0,WARPF_ABSOLUTEOFFSET,1);
		Goto MoveOut;
		TNT1 A 0 A_Warp(AAPTR_DEFAULT,vel.x,vel.y,vel.z,0,WARPF_ABSOLUTEOFFSET,1);
		Goto MoveOut;
		TNT1 A 0
		{
			if(life[0]<400&&!CheckIfSeen())
				A_SpawnItemEx("GluonTrailV2",vel.x+frandom(-1.0,1.0),0,vel.z+frandom(-1.0,1.0),flags:SXF_ABSOLUTEMOMENTUM);
			life[0]++;
		}
		Loop;
	MoveOut:
		TNT1 A 5;
		Goto Movement;
	Death:
		TNT1 A 1
		{
			A_Explode(random(40,60),75,0);
			A_SpawnItemEx("GluonTrail");
			A_SpawnProjectile("RipperEffect",0,0,0,CMF_AIMDIRECTION|CMF_TRACKOWNER);
		}
		Stop;
	}
}

class GluonFakeBurst : GluonPrimaryBurst
{
	Default
	{
		Damage 0;
		+PAINLESS
		+BLOODLESSIMPACT
		+DONTSPLASH
	}
	States
	{
	Movement:
		TNT1 A 0 A_JumpIf(life[0]>=20000,"Death");
		TNT1 A 0 A_Warp(AAPTR_DEFAULT,vel.x,vel.y,vel.z,0,WARPF_ABSOLUTEOFFSET,1);
		Goto MoveOut;
		TNT1 A 0 A_Warp(AAPTR_DEFAULT,vel.x,vel.y,vel.z,0,WARPF_ABSOLUTEOFFSET,1);
		Goto MoveOut;
		TNT1 A 0 A_Warp(AAPTR_DEFAULT,vel.x,vel.y,vel.z,0,WARPF_ABSOLUTEOFFSET,1);
		Goto MoveOut;
		TNT1 A 0 A_Warp(AAPTR_DEFAULT,vel.x,vel.y,vel.z,0,WARPF_ABSOLUTEOFFSET,1);
		Goto MoveOut;
		TNT1 A 0 A_Warp(AAPTR_DEFAULT,vel.x,vel.y,vel.z,0,WARPF_ABSOLUTEOFFSET,1);
		Goto MoveOut;
		TNT1 A 0
		{
			if(life[0]<4000&&!CheckIfSeen())
				A_SpawnItemEx("GluonTrailV2",vel.x+frandom(-1.0,1.0),0,vel.z+frandom(-1.0,1.0),flags:SXF_ABSOLUTEMOMENTUM);
			life[0]++;
		}
		Loop;
	MoveOut:
	Death:
		TNT1 A 1;
		Stop;
	}
}

class GluonSpiral : Actor
{
	int life;
	Default
	{
		Projectile;
		+DONTREFLECT
		+PAINLESS
		+BLOODLESSIMPACT
		+NOTIMEFREEZE
		Radius 5;
		Height 5;
		Speed 5;
		WeaveIndexZ 16;
	}
	States
	{
	Spawn:
		TNT1 A 0 NODELAY
		{
			int token=target.CountInv("GluonTrailToken");
			if(token)
			{
				for(int i=0;i<token*5;i++)
					A_Weave(-1,-1,1,1);
				if(token>=14)
					A_TakeInventory("GluonTrailToken",giveto:AAPTR_TARGET);
			}
			A_GiveInventory("GluonTrailToken",1,AAPTR_TARGET);
		}
	Moving:
		TNT1 A 0 A_Warp(AAPTR_DEFAULT,vel.x,vel.y,vel.z,0,WARPF_ABSOLUTEOFFSET|WARPF_INTERPOLATE,1);
		Goto Death;
		TNT1 A 0
		{
			A_Weave(1,1,1,1);
			A_SpawnItemEx("GluonTrailV3");
			life++;
		}
		TNT1 A 0 A_JumpIf(life>=350,"Death");
		Loop;
	Death:
		TNT1 A 1;
		Stop;
	}
}

class GluonTrailToken : Inventory{Default{Inventory.MaxAmount 14;}}

class GluonTrailV2 : Actor
{
	Default
	{
		+NOTIMEFREEZE
		+NOINTERACTION
		Scale .2;
		RenderStyle "Add";
		Translation "0:255=%[0,0,0]:[0.15,0.15,1]";
		Alpha .25;
	}
	States
	{
	Spawn:
		PLSE B 2 BRIGHT NODELAY
		{
			A_SetScale(frandom(0.2,0.35));
			self.frame=random(1,3);
		}
		Stop;
	}
}

class GluonTrailV3 : GluonTrailV2
{
	Default
	{
		Scale .2;
		Alpha .25;
	}
	States
	{
	Spawn:
		LPUF A 2;
		Stop;
	}
}

class GluonPrimaryBurst2 : GluonPrimaryBurst
{
	States
	{
	Spawn:
		TNT1 A 1 A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,90,CMF_AIMDIRECTION,30);
		TNT1 A 1 A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,90,CMF_AIMDIRECTION,60);
		TNT1 A 1 A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,90,CMF_AIMDIRECTION,90);
		TNT1 A 1 A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,-90,CMF_AIMDIRECTION,60);
		TNT1 A 1 A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,-90,CMF_AIMDIRECTION,30);
		TNT1 A 1 A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,-90,CMF_AIMDIRECTION,0);
		TNT1 A 1 A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,-90,CMF_AIMDIRECTION,-30);
		TNT1 A 1 A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,-90,CMF_AIMDIRECTION,-60);
		TNT1 A 1 A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,-90,CMF_AIMDIRECTION,-90);
		TNT1 A 1 A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,90,CMF_AIMDIRECTION,-60);
		TNT1 A 1 A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,90,CMF_AIMDIRECTION,-30);
		TNT1 A 1 A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,90,CMF_AIMDIRECTION,0);
		Loop;
	}
}

class GluonPrimaryBurst3 : GluonPrimaryBurst2{States{Spawn:Goto Super::Spawn+1;}}
class GluonPrimaryBurst4 : GluonPrimaryBurst2{States{Spawn:Goto Super::Spawn+2;}}
class GluonPrimaryBurst5 : GluonPrimaryBurst2{States{Spawn:Goto Super::Spawn+3;}}
class GluonPrimaryBurst6 : GluonPrimaryBurst2{States{Spawn:Goto Super::Spawn+4;}}
class GluonPrimaryBurst7 : GluonPrimaryBurst2{States{Spawn:Goto Super::Spawn+5;}}
class GluonPrimaryBurst8 : GluonPrimaryBurst2{States{Spawn:Goto Super::Spawn+6;}}
class GluonPrimaryBurst9 : GluonPrimaryBurst2{States{Spawn:Goto Super::Spawn+7;}}
class GluonPrimaryBurst10 : GluonPrimaryBurst2{States{Spawn:Goto Super::Spawn+8;}}
class GluonPrimaryBurst11 : GluonPrimaryBurst2{States{Spawn:Goto Super::Spawn+9;}}
class GluonPrimaryBurst12 : GluonPrimaryBurst2{States{Spawn:Goto Super::Spawn+10;}}

//The Gluon "flash", which up close, is deadly to those who get in front of the gun.
class GluonFire : Actor
{
	Default
	{
		Speed 20;
		DamageFunction (1);
		Radius 1;
		Height 1;
		Projectile;
		+RIPPER
		+DONTREFLECT
		+EXTREMEDEATH
		DamageType "PlasmaDisint";
	}
	States
	{
	Spawn:
		TNT1 A 1;
		Stop;
	}
}

class GluonFire2 : GluonFire
{
	States
	{
	Spawn:
		TNT1 A 2;
		Stop;
	}
}

class GluonFire3 : GluonFire
{
	States
	{
	Spawn:
		TNT1 A 3;
		Stop;
	}
}

class GluonFire4 : GluonFire{Default{Speed 30;}}
class GluonFire5 : GluonFire2{Default{Speed 30;}}

class GluonTrail : Actor
{
	Default
	{
		Scale 1.15;
		Projectile;
		+NOINTERACTION
		RenderStyle "Add";
		Alpha .45;
	}
	States
	{
	Spawn:
		LPUF ABC 2;
		Stop;
	}
}

class GluonExplosion : GluonTrail
{
	Default
	{
		+NOCLIP
		+EXTREMEDEATH
		+FORCERADIUSDMG
		DamageType "PlasmaDisint";
	}
	States
	{
	Spawn:
		TNT1 A 0 NODELAY A_Explode(10,75,0);
		Stop;
	}
}

class GluonOutsideTrailSpawner : Actor
{
	Default
	{
		+NOINTERACTION
	}
	States
	{
	Spawn:
		TNT1 A 1;
		TNT1 A 1 A_SpawnItemEx("GluonTrail");
		Stop;
	}
}

class RipperEffect : Actor
{
	Default
	{
		Projectile;
		+RIPPER
		+EXTREMEDEATH
		+DONTREFLECT
		+PAINLESS
		Speed 1;
		Damage 1;
		Radius 1;
		Height 1;
		DamageType "PlasmaDisint";
	}
	States
	{
	Spawn:
		TNT1 A 1;
		Stop;
	}
}

//***************************************************************
class AECell : Ammo
{
	Default
	{
		+FLOORCLIP
		radius 8;
		height 8;
		inventory.pickupmessage "Picked up depleted U-235.";
		inventory.amount 20;
		inventory.maxamount 100;
		inventory.pickupsound "misc/w_pkup";
		ammo.backpackamount 20;
		Scale .75;
		inventory.icon "i_bul1";	//Change when proper icon is inserted into file
	}
	states
	{
	Spawn:
		POSS A -1;
		Loop;
	}
}

//****
// Hornet Gun (aka HiveHand)
//****

class HornetGun : ParanoidWeapon
{
	Default
	{
		+FLOORCLIP
		+WEAPON.CHEATNOTWEAPON
		+WEAPON.AMMO_OPTIONAL
		-WEAPON.NOALERT
		-WEAPON.AMMO_CHECKBOTH
		Weapon.AmmoType1 "HLHornet";
		Weapon.AmmoType2 "HLHornet";
		Weapon.AmmoGive1 10;
		Weapon.AmmoUse1 1;
		Weapon.AmmoUse2 1;
		Inventory.PickupMessage "You swiped an alien hornet gun!";
		Inventory.PickupSound "reilsss/weapons/demoncalleridlebio";
		weapon.upsound "weapons/draw";
		Scale .095;
		Tag "HornetGun";
		Inventory.Icon "i_hhand1";
	}
    States
    {
	Deselect:
		HWD1 ABCDEFGHIJKLMNOPQR 2;
		TNT1 A 0 A_Lower;
		Wait;
	Ready:
		TNT1 A 0;
		HWU1 ABCDEFGHIJKLMNOPQRSTUVWXYZ[\] 1;
		HWU2 A 1;
    Ready2:
		HWI1 A 6
		{
			if(CountInv("HLHornet"))
				A_WeaponReady();
			else
				A_WeaponReady(WRF_NOFIRE);
		}
		HWI1 B 0 A_GiveInventory("HLHornet");
		Loop;
    Fire:
		HWF1 A 1 A_FireHornet;
		HWF1 BCEGHIJ 1;
		Goto Ready2;
    AltFire:
		HWF1 A 1 A_FireHornet("HGunHornet2");
		HWF1 CHI 1;
		Goto Ready2;
    Flash:
		TNT1 A 1 A_Light2;
		TNT1 A 1 A_Light1;
		Goto LightDone;
    }
	action void A_FireHornet(class<actor> hornet="HGunHornet")
	{
		A_PlaySound("halflife/monsters/hornetgrunt/flysight",CHAN_WEAPON,0.6,0);
		A_FireProjectile(hornet,0,1,8,0);
	}
}

class HLHornet : Ammo
{
	Default
	{
		Inventory.MaxAmount 10;
		+INVENTORY.IGNORESKILL
		inventory.icon "i_bul1";	//Change when proper icon is inserted into file
	}
}

class HGunHornet : Actor
{
	class<actor> trail;
	Property trail:trail;
	Default
	{
		Radius 4;
		Height 4;
		Speed 20;
		Damage 5;
		Scale .095;
		+SEEKERMISSILE
		Projectile;
		HGunHornet.Trail "HGHornetTrail";
	}
	States
    {
    Spawn:
		HLOH B 1 BRIGHT A_HornetFly(SMF_LOOK);
		Loop;
    Death:
    Crash:
		TNT1 A 1
		{
			bool num;
			actor hornet;
			[num,hornet]=A_SpawnItemEx("HGHornetShooter1");
			if(bSEEKERMISSILE)
				hornet.bSEEKERMISSILE=1;
			A_PlaySound("halflife/monsters/hornetgrunt/flybuzz");
		}
		Stop;
    XDeath:
		TNT1 A 0 A_PlaySound("halflife/monsters/hornetgrunt/flyhit");
		Stop;
    }
	void A_HornetFly(int flg=0)
	{
		A_SpawnItemEx(trail);
		if(bSEEKERMISSILE)
			A_SeekerMissile(2,2,flg,90,3);
	}
}

class HGunHornet2 : HGunHornet
{
	Default
	{
		Speed 10;
		Scale .025;
		-SEEKERMISSILE
	}
	States
    {
    Spawn:
		HLOH A 1 BRIGHT A_HornetFly;
		Loop;
    }
}

class HGruntHornet : HGunHornet
{
	Default
	{
		Radius 8;
		Height 12;
		Projectile;
		Speed 17;
		Damage 4;
		Scale .085;
		DamageType "Hornet";
		SeeSound "halflife/monsters/hornetgrunt/flysight";
	}
	States
	{
	Spawn:
		HLOH B 1 NODELAY A_HornetFly;
		Loop;
	}
}

class HGHornetShooter1 : Actor
{
	Default
	{
		+FRIENDLY
		+ISMONSTER
		Radius 1;
		Height 1;
		+NOGRAVITY
		+NOCLIP
		+LOOKALLAROUND
	}
	States
	{
	Spawn:
		TNT1 A 1 NODELAY A_Look;
		TNT1 A 0
		{
			if(CheckIfCloser(target,128))
			{
				A_FaceTarget();
				let hornet=HGruntHornetFake(A_SpawnProjectile("HGruntHornetFake",0));
				hornet.countdown=1;
				return;
			}
			int zvel=2,ang=90;
			if(random(0,1))
			{
				zvel=5;
				ang=-90;
			}
			bool num;
			actor hornet;
			[num,hornet]=A_SpawnItemEx("HGruntHornetFake",0,0,0,10,0,random(0-zvel,zvel),ang);
			if(!bSEEKERMISSILE)
			{
				hornet.frame=0;
				let thishorn=HGruntHornetFake(hornet);
				thishorn.trail="HGHornetTrail2";
			}
		}
		Stop;
	}
}

class HGruntHornetFake : HGruntHornet
{
	int countdown;
	Default
	{
		SeeSound "";
	}
	States
	{
	Spawn:
		HLOH B 1 NODELAY
		{
			if(countdown>=1)
			{
				countdown++;
				if(countdown>=21)
					return resolvestate("Death");
			}
			else
				A_HornetFly();
			return state(null);
		}
		Loop;
	Death:
	Crash:
		TNT1 A 1 A_PlaySound("halflife/monsters/hornetgrunt/flybuzz");
		Stop;
	}
}

class HGHornetTrail : Actor
{
	Default
	{
		radius 6;
		height 8;
		+NOINTERACTION
		Scale .015;
		RenderStyle "Add";
		Translation "80:111=160:167";
	}
	states
	{
	Spawn:
		X099 A 1 A_FadeOut(.03);
		Loop;
	}
}

class HGHornetTrail2 : HGHornetTrail
{
	Default
	{
		Alpha .5;
		Translation "80:111=192:223";
	}
}

//============
// Ammo Pack
//============

class AmmoPack : CustomInventory
{
	Default
	{
		Radius 6;
		Height 24;
		Inventory.PickupSound "misc/w_pkup";
		Inventory.PickupMessage "Picked up an AmmoPack!";
		+FLOORCLIP
	}
	States
	{
	Spawn:
		POSS A -1;
		Stop;
	Pickup:
		TNT1 A 0
		{
			A_GiveInventory("BClip",17);
			A_GiveInventory("ARClip",25);
			A_GiveInventory("PShell",4);
			A_GiveInventory("PythonAmmo",6);
			A_GiveInventory("RPGAmmo");
			A_GiveInventory("Xbowbolts",2);
			A_GiveInventory("AECell",10);
		}
		Stop;
	}
}