class ParanoidWeapon : Weapon
{
	States
	{
	Spawn:
		POSS A -1;
		Stop;
	}
	action void WeaponRecoil(int climb)
		{A_SetPitch(pitch-climb*.0054931640625);}
}

class ParanoidWeaponGiver : WeaponGiver
{
	string Weapon1,Weapon2;
	int Weapon1Amount;
	Property Weapon1: Weapon1,Weapon2,Weapon1Amount;
	override bool TryPickup(in out Actor toucher)
	{
		if(WeaponGiver.TryPickup(toucher))
		{
			toucher.A_GiveInventory(Weapon1,Weapon1Amount);
			GoAwayAndDie();
			return true;
		}
		if(toucher.A_GiveInventory(Weapon2,Weapon1Amount))
		{
			GoAwayAndDie();
			return true;
		}
		return false;
	}
	States
	{
	Spawn:
		POSS A -1;
		Stop;
	}
}

//****************************************
// Dummy item for light on player weapons
//****************************************
class LighCheapHack : Actor
{
	Default
	{
		+NOINTERACTION
	}
	States
	{
	Spawn:
		TNT1 A 3 LIGHT("YellowMediumFlicker3");
		TNT1 A 3 LIGHT("YellowSmallFlicker1");
		Stop;
	}
}

//================
// Weapons & Ammo
//================

class Crowbar : ParanoidWeapon
{
	Default
	{
		Tag "Crowbar";
		Height 4;
		Weapon.Kickback 0;
		Inventory.PickupSound "misc/i_pkup";
		MeleeSound "halflife/weapons/Crowbarhitbody";
		Inventory.PickupMessage "Picked up a Crowbar";
		Obituary "%k shoved %o's crowbar where the sun don't shine.";
		+WEAPON.MELEEWEAPON
		Inventory.Icon "i_cbar1";
	}
	States
	{
	Ready:
		HW4I A 4 A_WeaponReady;
		Loop;
	Deselect:
		HW4I A 1 A_Lower(12);
		Loop;
	Select:
		HW4I A 1 A_Raise(12);
		Loop;
	Fire:
		TNT1 A 0 A_Jump(255,"Fire1","Fire2","Fire3");
	Fire1:
		TNT1 A 0 A_JumpIfCloser(80,"FireFast1");
		HW4F BC 2;
		TNT1 A 0 A_PlaySound("halflife/weapons/CrowbarMiss",CHAN_WEAPON);
		HW4F D 2;
		HW4F E 1 A_FireBullets(1,1,1,3,"CrowbarPuff2",0,80);	//to ensure the puff spawning attack hits first
		HW4F E 1 A_FireBullets(12,12,5,3,"Puffnone",0,80);
		TNT1 A 0 A_JumpIfCloser(80,"Fire1F");
		HW4F FGGGG 2;
		HW4G H 2;
		HW4I A 2;
		Goto Ready;
	Fire1F:
		HW4F F 1;
		HW4F G 6;
		HW4G H 2;
		HW4I A 2;
		Goto Ready;
	Fire2:
		TNT1 A 0 A_JumpIfCloser(80,"FireFast2");
		HW4F B 2;
		HW4G BC 2;
		TNT1 A 0 A_PlaySound("halflife/weapons/CrowbarMiss",CHAN_WEAPON);
		HW4G D 1;
		HW4G D 1 A_FireBullets(1,1,1,3,"CrowbarPuff2",0,80);
		HW4G E 1 A_FireBullets(12,12,5,3,"Puffnone",0,80);
		TNT1 A 0 A_JumpIfCloser(80,"Fire2F");
		HW4G FG 1;
		TNT1 A 8;
		HW4G H 2;
		HW4I A 2;
		Goto Ready;
	Fire2F:
		HW4G FG 1;
		TNT1 A 4;
		HW4G H 1;
		HW4I A 2;
		Goto Ready;
	Fire3:
		TNT1 A 0 A_JumpIfCloser(80,"FireFast3");
		HW4H BCD 2;
		HW4H E 2 A_PlaySound("halflife/weapons/CrowbarMiss",CHAN_WEAPON);
		HW4H F 1 A_FireBullets(1,1,1,3,"CrowbarPuff2",0,80);
		HW4H F 1 A_FireBullets(12,12,5,3,"Puffnone",0,80);
		HW4H G 2;
		TNT1 A 8 A_JumpIfCloser(90,"Fire3F");
		HW4H HIJKLM 1;
		Goto Ready;
	Fire3F:
		TNT1 A 3;
		HW4H HJKM 1;
		Goto Ready;
	FireFast1:
		HW4F BC 2;
		TNT1 A 0 A_PlaySound("halflife/weapons/CrowbarMiss",CHAN_WEAPON);
		HW4F D 1 A_FireBullets(1,1,1,3,"CrowbarPuff2",0,80);
		HW4F E 1 A_FireBullets(12,12,5,3,"Puffnone",0,80);
		HW4F F 1;
		HW4F G 4;
		HW4G H 2;
		HW4I A 2;
		Goto Ready;
	FireFast2:
		HW4F B 2;
		HW4G BC 2;
		TNT1 A 0 A_PlaySound("halflife/weapons/CrowbarMiss",CHAN_WEAPON);
		HW4G D 1 A_FireBullets(1,1,1,3,"CrowbarPuff2",0,80);
		HW4G E 1 A_FireBullets(12,12,5,3,"Puffnone",0,80);
		HW4G FG 1;
		TNT1 A 4;
		HW4G H 1;
		HW4I A 2;
		Goto Ready;
	FireFast3:
		HW4H BC 2;
		HW4H D 1;
		TNT1 A 0 A_PlaySound("halflife/weapons/CrowbarMiss",CHAN_WEAPON);
		HW4H E 1 A_FireBullets(1,1,1,3,"CrowbarPuff2",0,80);
		HW4H F 1 A_FireBullets(12,12,5,3,"Puffnone",0,80);
		HW4H G 2;
		TNT1 A 3;
		HW4H HJKM 1;
		Goto Ready;
	}
}

class Puffnone : Actor
{
	Default
	{
		+NOINTERACTION
	}
	States
	{
	Spawn:
		TNT1 A 4;
		Stop;
	}
}

class CrowbarPuff2 : Actor
{
	Default
	{
		+NOEXTREMEDEATH
		+NOBLOCKMAP
		+NOGRAVITY
		+PUFFONACTORS
		Scale 0.2;
		RenderStyle "Add";
	}
	states
	{
	Spawn:
		TNT1 A 4 NODELAY A_PlaySound("halflife/weapons/Crowbarhitbody",CHAN_WEAPON);
		Stop;
	Crash:
		TNT1 A 0 A_PlaySound("halflife/weapons/Crowbarhit",CHAN_WEAPON);
		TNT1 A 0 A_SpawnItemEx("PuffSmoke");
		TNT1 A 0 A_Jump(128,11);
		FX57 ABCDEFGHIJ 2 Bright A_FadeOut;
		Stop;
		FX57 KLMNOPQRST 2 Bright A_FadeOut;
		Stop;
	}
}

//===================
// Paranoid Shotgun
//===================

class ShotgunPickup : ParanoidWeaponGiver
{
	Default
	{
		Inventory.PickupMessage "You got the shotgun!";
		ParanoidWeaponGiver.Weapon1 "ShotgunHeldAmmo","PShell",8;
		DropItem "PShotgun";
	}
}
//=============================
// Paranoid Shotgun (Vertical)
//=============================

class Pshotgun1 : ShotgunPickup
{
	Default
	{
		Radius 4;
		Height 32;
	}
}

class Pshotgun : ParanoidWeapon
{
	Default
	{
		Tag "Shotgun";
		Height 4;
		+WEAPON.NOALERT
		+WEAPON.AMMO_CHECKBOTH
		Weapon.SelectionOrder 900;
		Weapon.AmmoUse 1;
		Weapon.AmmoUse2 1;
		Weapon.AmmoType "PShell";
		Weapon.AmmoType2 "ShotgunHeldAmmo";
		Inventory.PickupMessage "You got the shotgun!";
		Obituary "%o swallowed %k's lead pellets.";
		Decal "BulletChip";
		Inventory.Icon "i_sgun1";
	}
	States
	{
	Ready:
		HW1I A 0 A_JumpIfInventory("ShotgunHeldAmmo",0,2);
		HW1I A 0 A_JumpIfInventory("PShell",1,2);
		HW1I A 1 A_WeaponReady;
		Loop;
		HW1I A 1 A_WeaponReady(WRF_ALLOWRELOAD);
		Loop;
	Deselect:
		HW1I A 1 A_Lower(12);
		Loop;
	Select:
		HW1I A 1 A_Raise(12);
		Loop;
	Fire:
		TNT1 A 0 A_JumpIfInventory("ShotgunHeldAmmo",1,2);
		HW1I A 5 A_PlaySound("halflife/weapons/noammo",CHAN_WEAPON);
		Goto Reload;
	Shot:
		TNT1 A 0 A_PlaySound("halflife/weapons/shotgunsingle",CHAN_WEAPON);
		TNT1 A 0 WeaponRecoil(350);
		TNT1 A 0 A_AlertMonsters;
		TNT1 AA 0 A_FireProjectile("GunSmallSmokeSpawner",0,0,4,6);
		TNT1 A 0 A_SpawnItemEx("LighCheapHack");
		HW1I B 2 A_FireBullets(3,3,8,5,"NewPuff1",0);
		//hw1I B 2 A_FireBullets(6,6,7,5,"NewPuff1",0);
		TNT1 A 0 A_TakeInventory("ShotgunHeldAmmo",1);
		HW1I BCCCDDD 1 WeaponRecoil(-50);
		hw1I EFGH 3;
		TNT1 A 0 A_PlaySound("halflife/weapons/shotgunpump",CHAN_WEAPON);
		hw1I IJKLMNOPQRS 2;
		HW1I A 0 A_CheckReload;
		Goto Ready;
	Reload:
		HW1I A 5;
		HW1Q ABCDE 3;
	ReloadLoop:
		HW1R ABC 2;
		TNT1 A 0 A_PlaySound("halflife/weapons/reload1",CHAN_WEAPON);
		TNT1 A 0 A_TakeInventory("PShell",1,TIF_NOTAKEINFINITE);
		TNT1 A 0 A_GiveInventory("ShotgunHeldAmmo",1);
		HW1R DEFG 2;
		HW1R A 0 A_WeaponReady(WRF_NOBOB);
		HW1R A 2;
		TNT1 A 0 A_JumpIfInventory("ShotgunHeldAmmo",0,"ReloadDone");
		TNT1 A 0 A_JumpIfInventory("PShell",1,"ReloadLoop");
		Goto ReloadDone;
	ReloadDone:
		HW1S ABCD 3;
		TNT1 A 0 A_PlaySound("halflife/weapons/shotgunpump",CHAN_WEAPON);
		hw1I IJKLMNOPQRS 2;
		Goto Ready;
	AltFire:
		TNT1 A 0 A_JumpIfInventory("ShotgunHeldAmmo",2,"DoubleShot");	//if less than two, will shot only one
		Goto Fire;
	DoubleShot:
		TNT1 A 0 A_PlaySound("halflife/weapons/shotgundouble",CHAN_WEAPON);
		TNT1 A 0 WeaponRecoil(550);
		TNT1 AA 0 A_FireProjectile("GunSmallSmokeSpawner",0,0,4,5);
		TNT1 A 0 A_AlertMonsters;
		TNT1 A 0 A_SpawnItemEx("LighCheapHack");
		TNT1 A 0 A_TakeInventory("ShotgunHeldAmmo",2);
		hw1B A 2 A_FireBullets(10,10,20,5,"NewPuff1",0);
		HW1B ABBCCDDEEFF 1 WeaponRecoil(-50);
		HW1B HIJKLMN 2;
		TNT1 A 0 A_PlaySound("halflife/weapons/shotgunpump",CHAN_WEAPON);
		hw1I IJKLMNOPQRS 2;
		HW1I A 0 A_CheckReload;
		Goto Ready;
	}
}
class ShotgunHeldAmmo : Ammo
{
	Default
	{
		+INVENTORY.IGNORESKILL
		Inventory.MaxAmount 8;
	}
}

//=========================
// Paranoid Shotgun Shells
//=========================

class PShell : Ammo
{
	Default
	{
		Tag "Shell";
		Radius 4;
		Height 4;
		Inventory.PickupSound "misc/w_pkup";
		Inventory.PickupMessage "Picked up 4 shotgun shells.";
		Inventory.Amount 4;
		Inventory.MaxAmount 125;
		Ammo.BackpackAmount 4;
		Inventory.Icon "i_shel1";
	}
	States
	{
	Spawn:
		POSS A -1;
		Stop;
	}
}

//===========================
// Paranoid Shotgun Shellbox
//===========================

class PShellBox : PShell
{
	Default
	{
		Radius 6;
		Inventory.PickupMessage "Picked up a box of shotgun shells.";
		Inventory.Amount 12;
	}
}

//===================
// 9mm Assault Rifle
//===================

class M16Pickup : ParanoidWeaponGiver
{
	Default
	{
		Inventory.PickupMessage "You got the 9mm Assault Rifle";
		ParanoidWeaponGiver.Weapon1 "M16HeldAmmo","ARClip",25;
		DropItem "ARifle";
	}
	override bool TryPickup(in out Actor toucher)
	{
		if(WeaponGiver.TryPickup(toucher))
		{
			toucher.A_GiveInventory(Weapon1,Weapon1Amount);
			toucher.A_GiveInventory("M16Gren");
			GoAwayAndDie();
			return true;
		}
		if(toucher.A_GiveInventory(Weapon2,Weapon1Amount))
		{
			GoAwayAndDie();
			return true;
		}
		return false;
	}
}

//=============================
// 9mm Assault Rifle (Vertical)
//=============================

class ARifle1 : M16Pickup
{
	Default
	{
		Radius 4;
		Height 32;
	}
}

class ARifle : ParanoidWeapon
{
	Default
	{
		Tag "Assault Rifle";
		Height 4;
		+WEAPON.NOALERT
		+INVENTORY.IGNORESKILL
		+WEAPON.AMMO_CHECKBOTH
		Weapon.SelectionOrder 1000;
		Weapon.AmmoUse 1;
		Weapon.AmmoUse2 1;
		Weapon.AmmoType "ARClip";
		Weapon.AmmoType2 "M16ClipGren";
		Inventory.PickupMessage "You got the 9mm Assault Rifle";
		Obituary "%o felt %k's m16.";
		Decal "BulletChip";
		Inventory.Icon "i_arifl1";
	}
	States
	{
	Ready:
		HW3I A 0 A_JumpIfInventory("M16HeldAmmo",0,2);
		HW3I A 0 A_JumpIfInventory("ARClip",1,2);
		HW3I A 1 A_WeaponReady;
		Loop;
		HW3I A 1 A_WeaponReady(WRF_ALLOWRELOAD);
		Loop;
	Deselect:
		HW3I A 1 A_Lower(12);
		Loop;
	Select:
		HW3I A 1 A_Raise(12);
		Loop;
	Fire:
		TNT1 A 0 A_JumpIfInventory("M16HeldAmmo",1,2);
		HW3I A 5 A_PlaySound("halflife/weapons/noammo",CHAN_WEAPON);
		Goto Reload;
		TNT1 A 0 A_SpawnItemEx("LighCheapHack");
		TNT1 A 0 A_PlaySound("halflife/weapons/machinegunshot",CHAN_WEAPON);
		TNT1 A 0 A_FireBullets(3,3,-1,5,"NewPuff1",0);
		TNT1 A 0 A_AlertMonsters;
		TNT1 A 0 A_FireProjectile("GunSmallSmokeSpawner",0,0,6,4);
		HW3F B 1 WeaponRecoil(100);
		TNT1 A 0 A_TakeInventory("M16HeldAmmo",1);
		HW3F CE 1 WeaponRecoil(-50);
		HW3F F 1;
		TNT1 A 0 A_CheckReload;
		Goto Ready;
	AltFire:
		TNT1 A 0 A_JumpIfInventory("M16Gren",1,2);
		HW3I A 12 A_PlaySound("halflife/weapons/noammo",CHAN_WEAPON);
		Goto Ready;
		TNT1 A 0 A_PlaySound("halflife/weapons/grenadelaunch",CHAN_WEAPON);
		TNT1 AA 0 A_FireProjectile("GunSmallSmokeSpawner",0,0,6,6);
		TNT1 A 0 A_AlertMonsters;
		TNT1 A 0 WeaponRecoil(400);
		TNT1 A 0 A_SpawnItemEx("LighCheapHack");
		TNT1 A 0 A_TakeInventory("M16Gren",1,TIF_NOTAKEINFINITE);
		HW3G A 2 A_FireProjectile("M16Grenade",0,0,5,0,FPF_NOAUTOAIM);
		HW3G BBCCDDEE 1 WeaponRecoil(-50);
		HW3G FGHIJKLMNOPQ 2;
		TNT1 A 0 A_CheckReload;
		Goto Ready;
	Reload:
		HW3I A 0 A_JumpIfInventory("ARClip",1,1);
		Goto Ready;
		HW3I A 5;
		HW3R ABCDEF 3;
		TNT1 A 0 A_PlaySound("halflife/weapons/m16cliprelease",CHAN_WEAPON);
	ReloadLoop:
		TNT1 A 0 A_TakeInventory("ARClip",1,TIF_NOTAKEINFINITE);
		TNT1 A 0 A_GiveInventory("M16HeldAmmo",1);
		TNT1 A 0 A_JumpIfInventory("M16HeldAmmo",0,"ReloadDone");
		TNT1 A 0 A_JumpIfInventory("ARClip",1,"ReloadLoop");
	ReloadDone:
		HW3R GHIJKLMNOPQ 2;
		TNT1 A 0 A_PlaySound("halflife/weapons/m16clipinsert",CHAN_WEAPON);
		HW3S ABCDEFGI 2;
		Goto Ready;
	}
}
class M16HeldAmmo : Ammo
{
	Default
	{
		+INVENTORY.IGNORESKILL
		Inventory.MaxAmount 50;
	}
}
class M16ClipGren : Ammo
{
	Default
	{
		+INVENTORY.IGNORESKILL
		Inventory.MaxAmount 70;
	}
}
class M16Grenade : Actor
{
	Default
	{
		Projectile;
		Speed 20;
		Damage 20;
		Radius 10;
		Height 20;
		-NoGravity
		Gravity 0.25;
		Scale 0.65;
		DeathSound "halflife/weapons/randomexplo";
		Decal "Scorch";
	}
	States
	{
	Spawn:
		TNT1 A 0;
		GRNL A 3 ThrustThingZ(0,8,0,1);
		TNT1 AA 0 A_SpawnItemEx("GrenadeTrail",random(1,-3),random(3,-3),2+random(3,-3));
		GRNL A 1;
		Goto Spawn+2;
	Death:
		TNT1 A 0 A_Explode(170,140);
		TNT1 A 10 A_SpawnItemEx("NewExplosionMedium");
		Stop;
	}
}

class GrenadeTrail : Actor
{
	Default
	{
		Projectile;
		+NOINTERACTION
		Scale 0.35;
		RenderStyle "Add";
		Alpha 0.67;
	}
	States
	{
	Spawn:
		TNT1 A 0;
		WPXS ABCDEFGIHJKLMNOPQRSTUVWXYZ 1 A_FadeOut(0.03);
		Wait;
	}
}

//====================
// Assault Rifle Clip
//====================

class ARClip : Ammo
{
	Default
	{
		Tag "9mm AR";
		Radius 8;
		Height 4;
		Inventory.PickupSound "misc/w_pkup";
		Inventory.PickupMessage "Picked up a clip.";
		Inventory.Amount 25;
		Inventory.MaxAmount 250;
		Ammo.BackpackAmount 25;
		Ammo.BackpackMaxAmount 400;
		Inventory.Icon "i_bul3";
	}
	States
	{
	Spawn:
		POSS A -1;
		Stop;
	}
}

//========================
// Assault Rifle Ammo Box
//========================
class ARAmmo : ARClip
{
	Default
	{
		Radius 12;
		Height 8;
		Inventory.PickupMessage "Picked up a box of 9mm bullets.";
		Inventory.Amount 50;
	}
}

//=========
// M16Gren
//=========

class M16Gren : Ammo
{
	Default
	{
		Tag "Grenade";
		Inventory.PickupMessage "Picked up two M16 Grenades.";
		Inventory.Amount 2;
		Inventory.MaxAmount 10;
		Ammo.BackpackAmount 2;
		Ammo.BackpackMaxAmount 20;
		Inventory.Icon "i_gren2";
	}
	States
	{
	Spawn:
		POSS A -1;
		Stop;
	}
}

//=========
// Beretta
//=========

class PistolPickup : ParanoidWeaponGiver
{
	Default
	{
		Inventory.PickupMessage "You picked up a Beretta.";
		ParanoidWeaponGiver.Weapon1 "PistolHeldAmmo","BClip",17;
		DropItem "Beretta";
	}
}

class Beretta : ParanoidWeapon
{
	Default
	{
		Tag "Beretta";
		Radius 4;
		Height 4;
		+WEAPON.NOALERT
		+INVENTORY.IGNORESKILL
		+WEAPON.AMMO_CHECKBOTH
		Weapon.SelectionOrder 2000;
		Weapon.AmmoUse 1;
		Weapon.AmmoUse2 1;
		Weapon.AmmoType "BClip";
		Weapon.AmmoType2 "PistolHeldAmmo";
		Inventory.PickupMessage "You picked up a Beretta.";
		Obituary "%o was out-gunned by %k's Beretta.";
		Decal "BulletChip";
		Inventory.Icon "i_pist1";
	}
	States
	{
	Ready:
		HW2I A 0 A_JumpIfInventory("PistolHeldAmmo",0,2);
		HW2I A 1 A_WeaponReady(WRF_ALLOWRELOAD);
		Loop;
		HW2I A 1 A_WeaponReady;
		Loop;
	Deselect:
		HW2I A 1 A_Lower(12);
		Loop;
	Select:
		HW2I A 1 A_Raise(12);
		Loop;
	Fire:
		TNT1 A 0 A_JumpIfInventory("PistolHeldAmmo",1,2);
		HW2I A 5 A_PlaySound("halflife/weapons/noammo",CHAN_WEAPON);
		Goto Reload;
		TNT1 A 0 A_PlaySound("halflife/weapons/pistol",CHAN_WEAPON);
		HW2F AB 1;
		TNT1 A 0 A_AlertMonsters;
		TNT1 A 0 A_TakeInventory("PistolHeldAmmo",1);
		TNT1 A 0 WeaponRecoil(100);
		TNT1 A 0 A_FireProjectile("GunSmallSmokeSpawner",0,0,7,5);
		TNT1 A 0 A_SpawnItemEx("LighCheapHack");
		HW2F C 2 A_FireBullets(1,1,-1,5,"NewPuff1",0);
		HW2F DD 1 WeaponRecoil(-50);
		HW2F D 1;
		HW2F EF 2;
		TNT1 A 0 A_ReFire;
		HW2F GHIJKL 2;
		Goto Ready;
	AltFire:
		TNT1 A 0 A_JumpIfInventory("PistolHeldAmmo",1,2);
		HW2I A 5 A_PlaySound("halflife/weapons/noammo",CHAN_WEAPON);
		Goto Reload;
		HW2F B 1;
		TNT1 A 0 A_AlertMonsters;
		TNT1 A 0 A_PlaySound("halflife/weapons/pistol",CHAN_WEAPON);
		TNT1 A 0 A_TakeInventory("PistolHeldAmmo",1);
		TNT1 A 0 WeaponRecoil(100);
		TNT1 A 0 A_FireProjectile("GunSmallSmokeSpawner",0,0,7,5);
		TNT1 A 0 A_SpawnItemEx("LighCheapHack");
		HW2F C 2 A_FireBullets(3,3,-1,5,"NewPuff1",0);
		HW2F DD 1 WeaponRecoil(-50);
		HW2F DE 1;
		HW2F E 1 A_ReFire;
		HW2F FGHIJKL 2;
		Goto Ready;
	Reload:
		TNT1 A 0 A_JumpIfInventory("BClip",1,3);
		HW2I A 0 A_PlaySound("halflife/weapons/noammo",CHAN_WEAPON);
		HW2I A 10 A_WeaponReady;
		Goto Ready;
		HW2I A 5;
		HW2R ABCDEF 3;
		TNT1 A 0 A_PlaySound("halflife/weapons/reload1",CHAN_WEAPON);
	ReloadLoop:
		TNT1 A 0 A_TakeInventory("BClip",1,TIF_NOTAKEINFINITE);
		TNT1 A 0 A_GiveInventory("PistolHeldAmmo",1);
		TNT1 A 0 A_JumpIfInventory("PistolHeldAmmo",0,"ReloadDone");
		TNT1 A 0 A_JumpIfInventory("BClip",1,"ReloadLoop");
	ReloadDone:
		HW2R GHIJKLM 2;
		TNT1 A 0 A_PlaySound("halflife/weapons/reload2",CHAN_WEAPON);
		HW2R NOPQRSTUV 2;
		Goto Ready;
	}
}
class PistolHeldAmmo : Ammo
{
	Default
	{
		+INVENTORY.IGNORESKILL
		Inventory.MaxAmount 17;
	}
}

//====================
// Beretta Clip
//====================

class BClip : Ammo
{
	Default
	{
		Tag "9mm";
		Radius 8;
		Height 4;
		Inventory.PickupSound "misc/w_pkup";
		Inventory.PickupMessage "Picked up a clip.";
		Inventory.Amount 17;
		Inventory.MaxAmount 250;
		Ammo.BackpackAmount 17;
		Ammo.BackpackMaxAmount 400;
		Inventory.Icon "i_bul1";
	}
	States
	{
	Spawn:
		POSS A -1;
		Stop;
	}
}

//=====================
// Python (357 Magnum)
//=====================

class R357Pickup : ParanoidWeaponGiver
{
	Default
	{
		Inventory.PickupMessage "A .357 Magnum! You Feelin' Lucky, Punk?";
		ParanoidWeaponGiver.Weapon1 "MagnumHeldAmmo","PythonAmmo",6;
		DropItem "Python";
	}
}

class Python : ParanoidWeapon
{
	Default
	{
		Tag "Python";
		Radius 4;
		Height 4;
		+WEAPON.NOALERT
		+INVENTORY.IGNORESKILL
		+WEAPON.AMMO_CHECKBOTH
		Weapon.Kickback 100;
		Weapon.SelectionOrder 1500;
		Weapon.AmmoUse 1;
		Weapon.AmmoUse2 1;
		Weapon.AmmoType "PythonAmmo";
		Weapon.AmmoType2 "MagnumHeldAmmo";
		Inventory.PickupMessage "A .357 Magnum! You Feelin' Lucky, Punk?";
		Obituary "%o's armor was pierced by %k's Python.";
		Decal "BulletChip";
		Inventory.Icon "i_pist2";
	}
	States
	{
	Ready:
		HWAI A 0 A_JumpIfInventory("MagnumHeldAmmo",0,2);
		TNT1 A 0 A_JumpIfInventory("PythonAmmo",1,2);
		HWAI A 1 A_WeaponReady;
		Loop;
		HWAI A 1 A_WeaponReady(WRF_ALLOWRELOAD);
		Loop;
	Deselect:
		HWAI A 1 A_Lower(12);
		Loop;
	Select:
		HWAI A 1 A_Raise(12);
		Loop;
	Fire:
		TNT1 A 0 A_JumpIfInventory("MagnumHeldAmmo",1,2);
		HWAI A 5 A_PlaySound("halflife/weapons/noammo",CHAN_WEAPON);
		Goto Reload;
		HWAF A 2;
		TNT1 A 0 A_PlaySound("halflife/weapons/magnumshot",CHAN_WEAPON);
		TNT1 A 0 WeaponRecoil(500);
		TNT1 A 0 A_AlertMonsters;
		TNT1 AA 0 A_FireProjectile("GunSmallSmokeSpawner",0,0,6,5);
		TNT1 A 0 A_SpawnItemEx("LighCheapHack");
		HWAF B 0 A_FireBullets (0, 0, 1, 85, "BulletPuff", 0);
		TNT1 A 0 A_TakeInventory("MagnumHeldAmmo",1);
		HWAF BBCCDDEEEE 1 WeaponRecoil(-50);
		HWAF FGHIJKLMNOP 3;
		HWAF A 0 A_CheckReload;
		Goto Ready;
	Flash:
		TNT1 A 4 A_Light1;
		TNT1 A 3 A_Light2;
		Goto LightDone;
	Reload:
		HWAR ABCDEFGHIJKLMNOPQRSTUVWXYZ 2;
		HWAS ABCDEFGHIJKL 2;
	ReloadLoop:
		TNT1 A 0 A_TakeInventory("PythonAmmo",1,TIF_NOTAKEINFINITE);
		TNT1 A 0 A_GiveInventory("MagnumHeldAmmo",1);
		TNT1 A 0 A_JumpIfInventory("MagnumHeldAmmo",0,"ReloadDone");
		TNT1 A 0 A_JumpIfInventory("PythonAmmo",1,"ReloadLoop");
	ReloadDone:
		TNT1 A 0 A_PlaySound("halflife/weapons/m357reload",CHAN_WEAPON);
		HWAS MNOPQRSTUV 2;
		Goto Ready;
	}
}
class MagnumHeldAmmo : Ammo
{
	Default
	{
		+INVENTORY.IGNORESKILL
		Inventory.MaxAmount 6;
	}
}

//=============
// Python Ammo
//=============

class PythonAmmo : Ammo
{
	Default
	{
		Tag ".357";
		Radius 6;
		Height 4;
		Inventory.PickupSound "misc/w_pkup";
		Inventory.PickupMessage "Picked up a box of .357 calibers.";
		Inventory.Amount 12;
		Inventory.MaxAmount 36;
		Ammo.BackpackAmount 6;
		Ammo.BackpackMaxAmount 50;
		Inventory.Icon "i_bul2";
	}
	States
	{
	Spawn:
		POSS A -1;
		Stop;
	}
}

class PythonAmmo1 : PythonAmmo
{
	Default
	{
		Radius 4;
		Inventory.PickupMessage "Picked up six 357 caliber bullets.";
		Inventory.Amount 6;
	}
}

//=====================
// RPG Launcher
//=====================

class RPGLauncher : ParanoidWeapon
{
	Default
	{
		Tag "RPG Launcher";
		Radius 32;
		Height 8;
		+FLOORCLIP
		Inventory.PickupMessage "You just got an RPG Launcher! Let's blow things up!";
		Weapon.AmmoUse 1;
		Weapon.AmmoGive 2;
		Weapon.AmmoType "RPGAmmo";
		Inventory.Icon "i_rlau1";
	}
	States
	{
	Ready:
		HW5I A 1 A_WeaponReady;
		Loop;
	Deselect:
		HW5I A 1 A_Lower(12);
		Loop;
	Select:
		HW5I A 1 A_Raise(12);
		Loop;
	Fire:
		TNT1 A 0 WeaponRecoil(800);
		TNT1 A 0 A_PlaySound("halflife/weapons/RPGFire",CHAN_WEAPON);
		TNT1 A 0 A_SpawnItemEx("LighCheapHack");
		HW5F A 3 A_FireProjectile("HLRocket",0,1,5,5);
		TNT1 A 0 A_Recoil(7);
		HW5F BBCCCCCC 1 WeaponRecoil(-100);
		HW5F DEFGHI 2;
		TNT1 A 0 A_CheckReload;
		HW5R ABCDEFGHIJKLMNOPQRSTUVWXYZ 2;
		HW5S ABCDE 2;
		Goto Ready;
	}
}

class HLRocket : Actor
{
	Default
	{
		Radius 5;
		Height 5;
		Speed 35;
		Scale 0.7;
		Damage 70;
		PROJECTILE;
		+EXTREMEDEATH
		+ROCKETTRAIL
		+FORCERADIUSDMG
		DeathSound "halflife/weapons/randomexplo";
		Decal "HugeScorch";
	}
	States
	{
	Spawn:
		MI13 A 1 Bright;
		TNT1 A 0 A_SpawnProjectile("RPGTrail2",random(3,-3),random(3,-3));
		TNT1 AA 0 A_SpawnProjectile("RPGTrail1",random(3,-3),random(3,-3));
		Loop;
	Death:
		TNT1 A 0 A_Explode(512,256,1);
		TNT1 A 0 A_SpawnProjectile("NewExplosionMediumBig",0,0,0,0);
		TNT1 A 20 Radius_Quake(8,20,0,35,0);
		Stop;
	}
}

class RPGTrail1 : Actor
{
	Default
	{
		+NOCLIP
		+NOGRAVITY
		RenderStyle "Add";
		Alpha 0.6;
		Scale 0.4;
	}
	States
	{
	Spawn:
		TNT1 A 2;
	 	TNT1 A 0 ThrustThingZ(0,random(1,5),0,1);
		SPIR KLMNO 3;
		Stop;
	}
}

class RPGTrail2 : RPGTrail1
{
	Default
	{
		Scale 0.3;
	}
	States
	{
	Spawn:
		TNT1 A 2;
	 	TNT1 A 0 ThrustThingZ(0,random(1,5),0,1);
		PUF2 ACEGIKMOQSUWY 1;
		PUF3 AC 1;
		Stop;
	}
}

//===================
// RPG Launcher Ammo
//===================

class RPGAmmo : Ammo
{
	Default
	{
		Tag "RPG";
		Radius 4;
		Height 20;
		Inventory.PickupSound "misc/w_pkup";
		Inventory.PickupMessage "Picked up an RPG round.";
		Inventory.MaxAmount 10;
		Ammo.BackpackAmount 2;
		Ammo.BackpackMaxAmount 20;
		Inventory.Icon "i_rock2";
	}
	States
	{
	Spawn:
		POSS A -1;
		Stop;
	}
}

class ZoomToken : Inventory{}

class BoltHeld : Ammo{Default{Inventory.MaxAmount 5;}}

//=============
// Cross-Bow
//=============

class XBow : ParanoidWeapon
{
	Default
	{
		Radius 16;
		Height 8;
		+FLOORCLIP
		+INVENTORY.IGNORESKILL
		+WEAPON.NOALERT
		Weapon.AmmoType1 "Xbowbolts";
		Weapon.AmmoType2 "BoltHeld";
		Weapon.AmmoGive1 5;
		Weapon.AmmoUse1 0;
		Inventory.PickupMessage "You got the crossbow! Snipe and impale!";
		Inventory.PickupSound "";
		weapon.upsound "";
		Tag "Crossbow";
		+WEAPON.NOAUTOFIRE
		Inventory.Icon "i_xbow1";
	}
	States
	{
	Ready:
		TNT1 A 0 A_JumpIfInventory("ZoomToken",1,"ReadyZoomed");
		TNT1 A 0 A_JumpIfInventory("BoltHeld",1,"ReadyNormal");
	ReadyNoAmmo:
		HWXF D 2 A_WeaponReady(WRF_ALLOWRELOAD);
		Goto Ready;
	ReadyNormal:
		HWXI A 2 A_WeaponReady(WRF_ALLOWRELOAD);
		Goto Ready;
	Deselect:
		D016 A 0 A_TakeInventory("ZoomToken",1);
		TNT1 N 0 A_ZoomFactor(1.0,1);
		HWXI A 1 A_Lower;
		TNT1 AA 0 A_Lower;
		Goto Deselect+2;
	Select:
		HWXI A 1 A_Raise;
		TNT1 AA 0 A_Raise;
		Loop;
	Fire:
		TNT1 A 0 A_JumpIfInventory("BoltHeld",1,"FireSuccessful");
		TNT1 A 0 A_JumpIfInventory("Xbowbolts",1,"Reload");
	DryFire:
		TNT1 A 0 A_JumpIfInventory("ZoomToken",1,"DryFireZoomed");
		HWXF D 0 A_PlaySound("Weapons/DryFire",CHAN_WEAPON);
		HWXF D 8 A_WeaponReady(WRF_NOFIRE);
		Goto Ready;
	DryFireZoomed:
		R016 N 0 A_PlaySound("Weapons/DryFire",CHAN_WEAPON);
		R016 N 8 A_WeaponReady(WRF_NOFIRE);
		Goto Ready;
	//------------------------------------------------------------------
	Reload:
		TNT1 A 0 A_JumpIfInventory("BoltHeld",5,"CantReloadStillHaveHeld");
		TNT1 A 0 A_JumpIfInventory("Xbowbolts",1,"ReloadSuccessful");
	CantReloadNoHeld:	//shows the bow string no longer retracted
		HWXF D 5 A_WeaponReady(WRF_NOFIRE);
		Goto Ready;
	CantReloadStillHaveHeld: // shows the bow string retracted as it still has at least one bolt ready to shoot
		HWXI A 5 A_WeaponReady(WRF_NOFIRE);
		Goto Ready;
	ReloadSuccessful:
		D016 A 0 A_TakeInventory("ZoomToken",1);
		R016 N 0 A_ZoomFactor(1.0,1);
		TNT1 A 0 A_PlaySound("HLCrossbow/Reload",CHAN_WEAPON);
		HWXR ABCDEFG 3;
	ReloadSuccessfulLoop:
		TNT1 A 0 A_TakeInventory("Xbowbolts",1);
		TNT1 A 0 A_GiveInventory("BoltHeld",1);
		TNT1 A 0 A_JumpIfInventory("BoltHeld",5,"ReloadSuccesfulEnd");
		TNT1 A 0 A_JumpIfInventory("Xbowbolts",1,"ReloadSuccessfulLoop");
	ReloadSuccesfulEnd:
		HWXR GGGHIJKLMNOPQRSTUVWXYZ 3;
		HWXS AB 3;
		Goto Ready;
	FireSuccessful:
		TNT1 A 0 A_JumpIfInventory("ZoomToken",1,"FireSuccessfulZoomed");
		TNT1 A 0 A_TakeInventory("BoltHeld",1);
		TNT1 A 0 A_PlaySound("HLCrossbow/Fire",CHAN_WEAPON);
		TNT1 A 0 A_FireProjectile("XbowBolt",0,0,4,3);
		TNT1 A 0 A_SetPitch(pitch-2.8);
		HWXF A 2;
		HWXF AAA 1 A_SetPitch(pitch+0.4);
		HWXF BBCC 1 A_SetPitch(pitch+0.4);
		HWXF D 2;
		TNT1 A 0 A_JumpIfInventory("BoltHeld",1,"EndFireAnimation");
		Goto Reload;
	EndFireAnimation:
		TNT1 A 0 A_PlaySound("HLCrossbow/Reload",CHAN_WEAPON);
		HWXF EFGHIJKLMNOPQRSTUVWXYZ 2;
		HWXG ABCD 2 A_WeaponReady;
		Goto Ready;
	//------------------------------------------------------------------
	AltFire:
		TNT1 A 0 A_JumpIfInventory("ZoomToken",1,"Dezoom");
		TNT1 A 0 A_PlaySound("BS/Headhunter/ZoomIn",7);
		R016 N 1 A_GiveInventory("ZoomToken",1);
		R016 N 1 A_ZoomFactor(5.0);
		Goto ReadyZoomed;
	ReadyZoomed:
		R016 N 3 A_WeaponReady(WRF_ALLOWRELOAD);
		Loop;
	Dezoom:
		D016 A 0 A_PlaySound("BS/Headhunter/ZoomOut",7);
		D016 A 0 A_TakeInventory("ZoomToken",1);
		R016 N 2 A_ZoomFactor(1.0,1);
		Goto Ready;
	FireSuccessfulZoomed:
		TNT1 A 0 A_TakeInventory("BoltHeld",1);
		TNT1 A 0 A_PlaySound("HLCrossbow/Fire",CHAN_WEAPON);
		TNT1 A 0 A_FireProjectile("XbowBolt",0,0,4,3);
		TNT1 A 0 A_SetPitch(pitch-2.8);
		R016 N 2;
		R016 NNN 1 A_SetPitch(pitch+0.4);
		R016 NNNN 1 A_SetPitch(pitch+0.4);
		R016 N 2;
		TNT1 A 0 A_JumpIfInventory("BoltHeld",1,"EndFireAnimationZoomed");
		Goto ReadyZoomed;
	EndFireAnimationZoomed:
		TNT1 A 0 A_PlaySound("HLCrossbow/Reload",CHAN_WEAPON);
		R016 NNNNNNNNNNNNNNNNNNNNNN 2;
		R016 NNNN 2 A_WeaponReady;
		Goto Ready;
	}
}

class XBowBolts : Ammo
{
	Default
	{
		+FLOORCLIP
		Radius 8;
		Height 4;
		inventory.pickupmessage "Picked up a clip of crossbow bolts";
		inventory.pickupsound "misc/w_pkup";
		inventory.amount 5;
		inventory.maxamount 50;
		ammo.backpackamount 5;
		inventory.icon "i_bul1";	//Change when proper icon is inserted into file
	}
	states
	{
	Spawn:
		POSS A -1;
		Stop;
	}
}

class XBowBoltSingle : XBowBolts
{
	Default
	{
		inventory.pickupmessage "Picked up a crossbow bolt";
		inventory.amount 1;
	}
}

class XbowBolt : FastProjectile
{
	Default
	{
		PROJECTILE;
		Radius 3;
		Height 5;
		Speed 80;
		Damage 50;
		DeathSound "weapons/crbreak";
		Decal "BulletChip";
		Scale 0.3;
		+BLOODSPLATTER
	}
	States
	{
	Spawn:
		HWXB A -1;
		Loop;
	Xdeath:
		TNT1 A 4 A_PlaySound("HLCrossbow/Hitbody",7);
		Stop;
	Death:
		TNT1 A 4 A_PlaySound("HLCrossbow/Hitwall",7);
		Stop;
	}
}

class Missile : Rocket
{
//	Speed 40
}

//=============
// Gluon Gun
// Developed by Major Cooke for AeOD; modified by DBThanatos & Kappes Buur
//=============

class GluonHeldAmmo : Inventory
{
	Default
	{
		Inventory.MaxAmount 40;
	}
}

//***************************************************************

class GluonGun : ParanoidWeapon
{
	Default
	{
		Weapon.AmmoUse1 0;
		Weapon.AmmoType1 "AECell";
		Weapon.AmmoGive1 40;
		Weapon.UpSound "weapons/plasma/draw";
		Weapon.SelectionOrder 10333;
		Inventory.PickupMessage "You found the Gluon Gun.";
		Inventory.PickupSound "misc/w_pkup";
		+INVENTORY.IGNORESKILL
		+FLOORCLIP
		Tag "Gluon gun";
		Scale 0.8;
		Inventory.Icon "i_gluon1";
	}
	States
	{
	Select:
		RFLP A 1 A_Raise;
		RFLP AA 0 A_Raise;
		Loop;
	Deselect:
		TNT1 A 0;
		TNT1 A 0 A_TakeInventory("GluonRunning",9999);
		TNT1 A 0 A_TakeInventory("GluonSoundCountdown",9999);
		RFLP A 1 A_Lower;
		RFLP AA 0 A_Lower;
		Loop;
	Ready:
		RFLP A 0 A_TakeInventory("GluonRunning",9999);
		RFLP A 0 A_TakeInventory("GluonSoundCountdown",9999);
	ReadyLoop:
		RFLP A 1 A_WeaponReady(WRF_ALLOWRELOAD);
		Loop;

	Fire:
		TNT1 A 0 A_JumpIfInventory("GluonHeldAmmo",1,"FireSuccesful"); //First it checks if there's any ammo in the clip
		Goto DryFire;												//otherwise it goes to it's dry fire state

	DryFire:	//This is reached when player tries to fire the weapon from scratch (AKA, not when player was
				//firing the weapon and ran out of ammo, that one is defined separately)
		RFLP A 0 A_PlaySound("Weapons/DryFire",6);	//plays the dry sound

	DryRefire:	//this is to loop the section, if player keeps the fire key pressed, the weapon will do nothing.
				//Instead, player has to release the fire key for the weapon to go to ready or reload if possible
		RFLP A 10;
		RFLP A 2 A_ReFire("DryRefire");		//this is where it loops if player kept "fire" pressed
		Goto Ready;						//Otherwise, it goes to the ready state

	DryFireAfterFiring:	//this is reached when player runs out of ammo after firing the weapon, it's different from the
						//dry fire above, because this one plays the "gluon off" sound and stops the looping sound
		RFLP A 0 A_PlaySound("Weapons/DryFire",6);				//plays the dry sound
		RFLP A 0 A_StopSound(CHAN_WEAPON);					//stops the looping gluon sound
		TNT1 A 0 A_PlaySound("weapons/gluonoff",CHAN_WEAPON);		//and plays the gluon off sound

	DryAfterFiringRefire:
		RFLP A 10;
		RFLP A 2 A_ReFire("DryAfterFiringRefire");		//this is where it loops if player kept "fire" pressed
		Goto Ready;

	FireSuccesful:
		TNT1 A 0 A_GiveInventory("GluonSoundCountdown",5); //Gives some counters, this is used to know in which part of the animation we're at
		RFLP A 0 Bright A_PlaySound("weapons/gluonstart",CHAN_WEAPON);
		TNT1 A 0 A_TakeInventory("GluonHeldAmmo",1);		//this is because the weapon doesnt actually use the "Cell" ammo, but the ammo held in the clip
		RFLP A 0 Bright A_FireProjectile("GluonPrimaryBurst",0,0,4,2); //this is where it would use ammo, was it not for the line above
		RFLP A 0 Bright A_FireProjectile("GluonFire4",0,0,4,2);
		RFLP A 2 Bright A_FireProjectile("GluonFire5",0,0,4,2);

		RFLP A 0 Bright A_ReFire("Shot2");
		RFLP A 0 Bright A_PlaySound("weapons/gluonoff",CHAN_WEAPON);
		RFLP BA 3;
		Goto Ready;
	Hold:
	Shot2:
		TNT1 A 0 A_JumpIfInventory("GluonHeldAmmo",1,"Shot2Success");
		Goto DryFireAfterFiring;	//see the state definition for the explanation
	Shot2Success:
		TNT1 A 0 A_TakeInventory("GluonHeldAmmo",1);
		RFLP A 0 Bright A_FireProjectile("GluonPrimaryBurst",0,0,4,2); //DBT self note: This one used ammo
		RFLP A 0 Bright A_FireProjectile("GluonFire",0,0,4,2);
		RFLP A 0 Bright A_FireProjectile("GluonFire2",0,0,4,2);
		RFLP A 2 Bright A_FireProjectile("GluonFire3",0,0,4,2);
		RFLP A 0 Bright A_FireProjectile("GluonPrimaryBurst",0,0,4,2); //DBT self note: This one used ammo
		RFLP A 0 Bright A_FireProjectile("GluonFire4",0,0,4,2);
		RFLP A 0 Bright A_FireProjectile("GluonFire5",0,0,4,2);
		RFLP A 2 bright;
		RFLP A 0 A_ReFire("Shot3");
		Goto Powerdown;
	Shot3:
		TNT1 A 0 A_JumpIfInventory("GluonHeldAmmo",1,"Shot3Success");
		Goto DryFireAfterFiring;	//see the state definition for the explanation
	Shot3Success:
		TNT1 A 0 A_TakeInventory("GluonHeldAmmo",1);
		RFLP A 0 Bright A_FireProjectile("GluonPrimaryBurst",0,1,4,2); //DBT self note: This one used ammo
		RFLP A 0 Bright A_FireProjectile("GluonFire",0,0,4,2);
		RFLP A 0 Bright A_FireProjectile("GluonFire2",0,0,4,2);
		RFLP A 2 Bright A_FireProjectile("GluonFire3",0,0,4,2);
		RFLP A 0 Bright A_FireProjectile("GluonPrimaryBurst",0,1,4,2); //DBT self note: This one used ammo
		RFLP A 0 Bright A_FireProjectile("GluonFire4",0,0,4,2);
		RFLP A 0 Bright A_FireProjectile("GluonFire5",0,0,4,2);
		RFLP A 2 bright;
		RFLP A 0 A_ReFire("Shot4");
		Goto Powerdown;
	Shot4:
		TNT1 A 0 A_JumpIfInventory("GluonHeldAmmo",1,"Shot4Success");
		Goto DryFireAfterFiring;	//see the state definition for the explanation
	Shot4Success:
		TNT1 A 0 A_TakeInventory("GluonHeldAmmo",1);
		RFLP A 0 Bright A_FireProjectile("GluonPrimaryBurst",0,1,4,2); //DBT self note: This one used ammo
		RFLP A 0 Bright A_FireProjectile("GluonFire",0,0,4,2);
		RFLP A 0 Bright A_FireProjectile("GluonFire2",0,0,4,2);
		RFLP A 2 Bright A_FireProjectile("GluonFire3",0,0,4,2);
		RFLP A 0 Bright A_FireProjectile("GluonPrimaryBurst",0,1,4,2); //DBT self note: This one used ammo
		RFLP A 0 Bright A_FireProjectile("GluonFire4",0,0,4,2);
		RFLP A 0 Bright A_FireProjectile("GluonFire5",0,0,4,2);
		RFLP A 2 bright;
		RFLP A 0 A_ReFire("Shot5");
		Goto Powerdown;
	Shot5:
		TNT1 A 0 A_JumpIfInventory("GluonHeldAmmo",1,"Shot5Success");
		Goto DryFireAfterFiring;	//see the state definition for the explanation
	Shot5Success:
		TNT1 A 0 A_TakeInventory("GluonHeldAmmo",1);
		RFLP A 0 Bright A_FireProjectile("GluonPrimaryBurst",0,1,4,2); //DBT self note: This one used ammo
		RFLP A 0 Bright A_FireProjectile("GluonFire",0,0,4,2);
		RFLP A 0 Bright A_FireProjectile("GluonFire2",0,0,4,2);
		RFLP A 2 Bright A_FireProjectile("GluonFire3",0,0,4,2);
		RFLP A 0 Bright A_FireProjectile("GluonPrimaryBurst",0,1,4,2); //DBT self note: This one used ammo
		RFLP A 0 Bright A_FireProjectile("GluonFire4",0,0,4,2);
		RFLP A 0 Bright A_FireProjectile("GluonFire5",0,0,4,2);
		RFLP A 2 bright;
		RFLP A 0 A_ReFire("Shot6");
		Goto Powerdown;
	Shot6:
		TNT1 A 0 A_JumpIfInventory("GluonHeldAmmo",1,"Shot6Success");
		Goto DryFireAfterFiring;	//see the state definition for the explanation
	Shot6Success:
		TNT1 A 0 A_TakeInventory("GluonHeldAmmo",1);
		RFLP A 0 Bright A_FireProjectile("GluonPrimaryBurst",0,1,4,2); //DBT self note: This one used ammo
		RFLP A 0 Bright A_FireProjectile("GluonFire",0,0,4,2);
		RFLP A 0 Bright A_FireProjectile("GluonFire2",0,0,4,2);
		RFLP A 2 Bright A_FireProjectile("GluonFire3",0,0,4,2);
		RFLP A 0 Bright A_FireProjectile("GluonPrimaryBurst",0,1,4,2); //DBT self note: This one used ammo
		RFLP A 0 Bright A_FireProjectile("GluonFire4",0,0,4,2);
		RFLP A 0 Bright A_FireProjectile("GluonFire5",0,0,4,2);
		RFLP A 2 bright;
		RFLP A 0 A_ReFire("Shot7");
		Goto Powerdown;
	Shot7:
		TNT1 A 0 A_JumpIfInventory("GluonHeldAmmo",1,"Shot7Success");
		Goto DryFireAfterFiring;	//see the state definition for the explanation
	Shot7Success:
		TNT1 A 0 A_TakeInventory("GluonHeldAmmo",1);
		RFLP A 0 Bright A_FireProjectile("GluonPrimaryBurst",0,1,4,2);	//DBT self note: This one used ammo
		RFLP A 0 Bright A_FireProjectile("GluonFire",0,0,4,2);
		RFLP A 0 Bright A_FireProjectile("GluonFire2",0,0,4,2);
		RFLP A 2 Bright A_FireProjectile("GluonFire3",0,0,4,2);
		RFLP A 0 Bright A_FireProjectile("GluonPrimaryBurst",0,1,4,2); 	//DBT self note: This one used ammo
		RFLP A 0 Bright A_FireProjectile("GluonFire4",0,0,4,2);
		RFLP A 0 Bright A_FireProjectile("GluonFire5",0,0,4,2);
		RFLP A 2 Bright;
		TNT1 A 0 A_TakeInventory("GluonSoundCountdown",1);
		TNT1 A 0 A_JumpIfInventory("GluonSoundCountdown",1,4);
		TNT1 A 0 A_JumpIfInventory("GluonRunning",1,3);
		TNT1 A 0 A_GiveInventory("GluonRunning",1);
		RFLP A 0 Bright A_PlaySound("weapons/gluonrun", CHAN_WEAPON, 1, 1);
		RFLP A 0 A_ReFire("Shot2");
		Goto Powerdown;
	Powerdown:
		RFLP A 0 A_StopSound(CHAN_WEAPON);
		RFLP A 0 A_PlaySound("weapons/gluonoff",CHAN_WEAPON);
		RFLP A 3;
		Goto Ready;

	AltFire:		//since this weapon doesnt have alt fire, it can trigger reload, but if you dont want it like that, just remove ONLY this line
	Reload:
		TNT1 A 0 A_JumpIfInventory("GluonHeldAmmo",40,"NoNeed");
		TNT1 A 0 A_JumpIfInventory("AECell",1,"ReloadPossible");
		TNT1 A 0 A_JumpIfInventory("GluonGun",0,"Empty");
//		RFLP A 10 A_PlaySound("halflife/weapons/noammo",CHAN_WEAPON);
//		HW2I A 10 A_PlaySound("halflife/weapons/noammo",CHAN_WEAPON);
		Goto Ready;
	ReloadPossible:
		RFLP A 5;
		RFLP ABCDEFGH 3;
		TNT1 A 0 A_PlaySound("halflife/weapons/reload1",CHAN_WEAPON);
		TNT1 A 0 A_JumpIfInventory("GluonHeldAmmo",40,"ReloadDone");
		TNT1 A 0 A_JumpIfInventory("AECell",1,"StillPossible");
		Goto ReloadDone;
	StillPossible:
		TNT1 A 0 A_TakeInventory("AECell",1);
		TNT1 A 0 A_GiveInventory("GluonHeldAmmo",1);
		Goto ReloadPossible+10;
	ReloadDone:
		RFLP IJKLM 2;
		TNT1 A 0 A_PlaySound("halflife/weapons/reload2",CHAN_WEAPON);
		RFLP M 3;
		RFLP LKJI 2;
		RFLP HGFEDCBA 3;
		Goto Ready;
	NoNeed:
		RFLP A 5;
		Goto Ready;
	Empty:
		RFLP A 5;
		RFLP ABCDEFGH 3;
		TNT1 A 0 A_PlaySound("halflife/weapons/noammo",CHAN_WEAPON);
		RFLP IJKLM 2;
		RFLP M 3;
		RFLP LKJI 2;
		RFLP HGFEDCBA 3;
		Goto Ready;
	}
}

class GluonRunning : Inventory{Default{Inventory.MaxAmount 10;}}

class GluonSoundCountdown : Inventory{Default{Inventory.MaxAmount 5;}}

//=========================================
//The main projectiles fired. Their all parents of GluonPrimaryBurst with the only difference
//being the outer-trail spawn locations. I'm going for a spiral after all...
//Skip past GluonPrimaryBurst12 for the effects.
//=========================================

class GluonPrimaryBurst : Actor
{
	int user_x;
	int user_y;
	int user_z;
	int user_life[2];
	int user_movement[2];
	Default
	{
		Speed 2;
		DamageFunction (random(1,6));
		Radius 2;
		Height 2;
		Scale .75;
		Projectile;
		+DONTREFLECT
		+EXTREMEDEATH
		+FORCERADIUSDMG
		+NODAMAGETHRUST
		+SEEKERMISSILE
		+SKYEXPLODE
		+EXPLODEONWATER
		+NOTIMEFREEZE
		DamageType "PlasmaDisint";
	}
	States
	{
	Spawn:
		TNT1 A 0 NODELAY
		{
			A_SpawnItemEx("GluonSpiral",0,0,8,vel.x,vel.y,vel.z,0,SXF_ABSOLUTEMOMENTUM|SXF_TRANSFERPOINTERS);
			A_SpawnItemEx("GluonFakeBurstDelay",flags:SXF_TRANSFERPOINTERS);
		}
	Movement:
		LPUF A 0 A_JumpIf(user_life[0]>=25000,"Death");
	//This must be done multiple times, or else it will jump beyond walls. This could
	//easily cause an engine overload.
		LPUF A 0 A_Warp(AAPTR_DEFAULT,vel.x,vel.y,vel.z,0,WARPF_ABSOLUTEOFFSET,1);
		Goto MoveOut;
		LPUF A 0 A_Warp(AAPTR_DEFAULT,vel.x,vel.y,vel.z,0,WARPF_ABSOLUTEOFFSET,1);
		Goto MoveOut;
		LPUF A 0 A_Warp(AAPTR_DEFAULT,vel.x,vel.y,vel.z,0,WARPF_ABSOLUTEOFFSET,1);
		Goto MoveOut;
		LPUF A 0 A_Warp(AAPTR_DEFAULT,vel.x,vel.y,vel.z,0,WARPF_ABSOLUTEOFFSET,1);
		Goto MoveOut;
		LPUF A 0 A_Warp(AAPTR_DEFAULT,vel.x,vel.y,vel.z,0,WARPF_ABSOLUTEOFFSET,1);
		Goto MoveOut;
		LPUF A 0 A_JumpIf(user_life[0]>=400,3);
		LPUF A 0 A_CheckSight(2);
		LPUF A 0 A_SpawnItemEx("GluonTrailV2",vel.x+frandom(-1.0,1.0),0,vel.z+frandom(-1.0,1.0),flags:SXF_ABSOLUTEMOMENTUM);
		LPUF A 0 {user_life[0]++;}
		Loop;
	MoveOut:
		TNT1 A 5;
		Goto Movement;
	Death:
		TNT1 A 0 A_Explode(random(40,60),75,0);
		TNT1 A 0 A_SpawnProjectile("GluonTrail",0);
		TNT1 A 1 A_SpawnProjectile("RipperEffect",0,0,0,6);
		Stop;
	}
}

class GluonFakeBurst : Actor//: FastProjectile
{
	int user_x;
	int user_y;
	int user_z;
	int user_life[2];
	int user_movement[2];
	Default
	{
		Speed 2;
		Radius 2;
		Height 2;
		Scale .75;
		Projectile;
		+PAINLESS
		+BLOODLESSIMPACT
		+DONTSPLASH
		+DONTREFLECT
		+EXTREMEDEATH
		+FORCERADIUSDMG
		+NODAMAGETHRUST
		+SEEKERMISSILE
		+SKYEXPLODE
		+EXPLODEONWATER
		+NOTIMEFREEZE
		DamageType "PlasmaDisint";
	}
	States
	{
	Spawn:
		TNT1 A 0;
		TNT1 A 0 A_SpawnItemEx("GluonSpiral",0,0,8,vel.x,vel.y,vel.z,0,SXF_ABSOLUTEMOMENTUM|SXF_TRANSFERPOINTERS);
	Movement:
		LPUF A 0 A_JumpIf(user_life[0]>=20000,"Death");
		LPUF A 0 A_Warp(AAPTR_DEFAULT,vel.x,vel.y,vel.z,0,WARPF_ABSOLUTEOFFSET,1);
		Goto MoveOut;
		LPUF A 0 A_Warp(AAPTR_DEFAULT,vel.x,vel.y,vel.z,0,WARPF_ABSOLUTEOFFSET,1);
		Goto MoveOut;
		LPUF A 0 A_Warp(AAPTR_DEFAULT,vel.x,vel.y,vel.z,0,WARPF_ABSOLUTEOFFSET,1);
		Goto MoveOut;
		LPUF A 0 A_Warp(AAPTR_DEFAULT,vel.x,vel.y,vel.z,0,WARPF_ABSOLUTEOFFSET,1);
		Goto MoveOut;
		LPUF A 0 A_Warp(AAPTR_DEFAULT,vel.x,vel.y,vel.z,0,WARPF_ABSOLUTEOFFSET,1);
		Goto MoveOut;
		LPUF A 0 A_JumpIf(user_life[0]>=4000,3);
		LPUF A 0 A_CheckSight(2);
		LPUF A 0 A_SpawnItemEx("GluonTrailV2",vel.x+frandom(-1.0,1.0),0,vel.z+frandom(-1.0,1.0),flags:SXF_ABSOLUTEMOMENTUM);
		LPUF A 0 {user_life[0]++;}
		Loop;
	MoveOut:
	Death:
		TNT1 A 1;
		Stop;
	}
}

class GluonFakeBurstDelay : Actor
{
	Default
	{
		+NOINTERACTION
		+NOTIMEFREEZE
	}
	States
	{
	Spawn:
		TNT1 A 1;
		TNT1 A 0 A_GiveInventory("GluonFakeBurstSpawn",1,AAPTR_TARGET);
		Stop;
	}
}

class GluonFakeBurstSpawn : CustomInventory
{
	Default
	{
		+NOTIMEFREEZE
		+INVENTORY.ALWAYSPICKUP
	}
	States
	{
	Pickup:
		TNT1 A 0 A_FireProjectile("GluonFakeBurst",0,0,4,2);
		Stop;
	}
}

class GluonSpiral : Actor
{
	int user_count;
	int user_life;
	Default
	{
		Projectile;
		+DONTREFLECT
		+PAINLESS
		+BLOODLESSIMPACT
		+NOTIMEFREEZE
		Radius 5;
		Height 5;
		Speed 5;
		WeaveIndexZ 16;
	}
	States
	{
	Spawn:
		TNT1 A 0;
	Jumping:
		TNT1 A 0 A_JumpIfInventory("GluonTrailToken",14,"T14",AAPTR_TARGET);
		TNT1 A 0 A_JumpIfInventory("GluonTrailToken",13,"T13",AAPTR_TARGET);
		TNT1 A 0 A_JumpIfInventory("GluonTrailToken",12,"T12",AAPTR_TARGET);
		TNT1 A 0 A_JumpIfInventory("GluonTrailToken",11,"T11",AAPTR_TARGET);
		TNT1 A 0 A_JumpIfInventory("GluonTrailToken",10,"T10",AAPTR_TARGET);
		TNT1 A 0 A_JumpIfInventory("GluonTrailToken",9,"T9",AAPTR_TARGET);
		TNT1 A 0 A_JumpIfInventory("GluonTrailToken",8,"T8",AAPTR_TARGET);
		TNT1 A 0 A_JumpIfInventory("GluonTrailToken",7,"T7",AAPTR_TARGET);
		TNT1 A 0 A_JumpIfInventory("GluonTrailToken",6,"T6",AAPTR_TARGET);
		TNT1 A 0 A_JumpIfInventory("GluonTrailToken",5,"T5",AAPTR_TARGET);
		TNT1 A 0 A_JumpIfInventory("GluonTrailToken",4,"T4",AAPTR_TARGET);
		TNT1 A 0 A_JumpIfInventory("GluonTrailToken",3,"T3",AAPTR_TARGET);
		TNT1 A 0 A_JumpIfInventory("GluonTrailToken",2,"T2",AAPTR_TARGET);
		TNT1 A 0 A_JumpIfInventory("GluonTrailToken",1,"T1",AAPTR_TARGET);
		Goto TokenUp;
	T14:
		TNT1 A 0 A_TakeInventory("GluonTrailToken",1000,0,AAPTR_TARGET);
		TNT1 AAAAA 0 A_Weave(-1,-1,1,1);
	T13:
		TNT1 AAAAA 0 A_Weave(-1,-1,1,1);
	T12:
		TNT1 AAAAA 0 A_Weave(-1,-1,1,1);
	T11:
		TNT1 AAAAA 0 A_Weave(-1,-1,1,1);
	T10:
		TNT1 AAAAA 0 A_Weave(-1,-1,1,1);
	T9:
		TNT1 AAAAA 0 A_Weave(-1,-1,1,1);
	T8:
		TNT1 AAAAA 0 A_Weave(-1,-1,1,1);
	T7:
		TNT1 AAAAA 0 A_Weave(-1,-1,1,1);
	T6:
		TNT1 AAAAA 0 A_Weave(-1,-1,1,1);
	T5:
		TNT1 AAAAA 0 A_Weave(-1,-1,1,1);
	T4:
		TNT1 AAAAA 0 A_Weave(-1,-1,1,1);
	T3:
		TNT1 AAAAA 0 A_Weave(-1,-1,1,1);
	T2:
		TNT1 AAAAA 0 A_Weave(-1,-1,1,1);
	T1:
		TNT1 AAAAA 0 A_Weave(-1,-1,1,1);
	TokenUp:
		TNT1 A 0 A_GiveInventory("GluonTrailToken",1,AAPTR_TARGET);
	Moving:
		TNT1 A 0 A_Warp(AAPTR_DEFAULT,vel.x,vel.y,vel.z,0,WARPF_ABSOLUTEOFFSET|WARPF_INTERPOLATE,1);
		Goto Death;

		TNT1 A 0 A_Weave(1,1,1,1);
		TNT1 A 0 A_SpawnItemEx("GluonTrailV3");
		TNT1 A 0 {user_life++;}
		TNT1 A 0 A_JumpIf(user_life>=350,"Death");
		Loop;
	Death:
		TNT1 A 1;
		Stop;
	}
}

class GluonTrailToken : Inventory{Default{Inventory.MaxAmount 14;}}

class GluonTrailV2 : Actor
{
	Default
	{
		+NOTIMEFREEZE
		+NOINTERACTION
		Scale 0.2; //0.45
		RenderStyle "Add";
		Translation "0:255=%[0,0,0]:[0.15,0.15,1]";
		Alpha 0.25;
	}
	States
	{
	Spawn:
		TNT1 A 0;
		PLSE B 0 A_SetScale(frandom(0.2,0.35));
		PLSE B 0 A_Jump(256,1,2,3);
		PLSE B 1 bright;
		Stop;

		PLSE C 1 bright;
		Stop;

		PLSE D 1 bright;
		Stop;
	}
}

class GluonTrailV3 : GluonTrailV2
{
	Default
	{
		Scale 0.2;
		Alpha 0.25;
	}
	States
	{
	Spawn:
		LPUF A 1;
		Stop;
	}
}

class GluonPrimaryBurst2 : GluonPrimaryBurst
{
	States
	{
	Spawn:
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,90,2,30);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,90,2,60);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,90,2,90);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,-90,2,60);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,-90,2,30);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,-90,2,0);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,-90,2,-30);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,-90,2,-60);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,-90,2,-90);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,90,2,-60);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,90,2,-30);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,90,2,0);
		Loop;
	}
}

class GluonPrimaryBurst3 : GluonPrimaryBurst
{
	States
	{
	Spawn:
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,90,2,60);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,90,2,90);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,-90,2,60);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,-90,2,30);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,-90,2,0);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,-90,2,-30);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,-90,2,-60);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,-90,2,-90);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,90,2,-60);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,90,2,-30);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,90,2,0);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,90,2,30);
		Loop;
	}
}

class GluonPrimaryBurst4 : GluonPrimaryBurst
{
	States
	{
	Spawn:
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,90,2,90);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,-90,2,60);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,-90,2,30);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,-90,2,0);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,-90,2,-30);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,-90,2,-60);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,-90,2,-90);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,90,2,-60);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,90,2,-30);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,90,2,0);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,90,2,30);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,90,2,60);
		Loop;
	}
}

class GluonPrimaryBurst5 : GluonPrimaryBurst
{
	States
	{
	Spawn:
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,-90,2,60);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,-90,2,30);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,-90,2,0);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,-90,2,-30);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,-90,2,-60);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,-90,2,-90);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,90,2,-60);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,90,2,-30);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,90,2,0);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,90,2,30);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,90,2,60);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,90,2,90);
		Loop;
	}
}

class GluonPrimaryBurst6 : GluonPrimaryBurst
{
	States
	{
	Spawn:
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,-90,2,30);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,-90,2,0);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,-90,2,-30);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,-90,2,-60);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,-90,2,-90);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,90,2,-60);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,90,2,-30);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,90,2,0);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,90,2,30);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,90,2,60);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,90,2,90);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,-90,2,60);
		Loop;
	}
}

class GluonPrimaryBurst7 : GluonPrimaryBurst
{
	States
	{
	Spawn:
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,-90,2,0);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,-90,2,-30);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,-90,2,-60);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,-90,2,-90);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,90,2,-60);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,90,2,-30);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,90,2,0);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,90,2,30);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,90,2,60);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,90,2,90);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,-90,2,60);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,-90,2,30);
		Loop;
	}
}

class GluonPrimaryBurst8 : GluonPrimaryBurst
{
	States
	{
	Spawn:
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,-90,2,-30);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,-90,2,-60);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,-90,2,-90);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,90,2,-60);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,90,2,-30);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,90,2,0);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,90,2,30);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,90,2,60);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,90,2,90);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,-90,2,60);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,-90,2,30);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,-90,2,0);
		Loop;
	}
}

class GluonPrimaryBurst9 : GluonPrimaryBurst
{
	States
	{
	Spawn:
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,-90,2,-60);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,-90,2,-90);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,90,2,-60);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,90,2,-30);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,90,2,0);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,90,2,30);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,90,2,60);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,90,2,90);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,-90,2,60);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,-90,2,30);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,-90,2,0);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,-90,2,-30);
		Loop;
	}
}

class GluonPrimaryBurst10 : GluonPrimaryBurst
{
	States
	{
	Spawn:
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,-90,2,-90);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,90,2,-60);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,90,2,-30);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,90,2,0);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,90,2,30);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,90,2,60);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,90,2,90);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,-90,2,60);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,-90,2,30);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,-90,2,0);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,-90,2,-30);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,-90,2,-60);
		Loop;
	}
}

class GluonPrimaryBurst11 : GluonPrimaryBurst
{
	States
	{
	Spawn:
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,90,2,-60);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,90,2,-30);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,90,2,0);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,90,2,30);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,90,2,60);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,90,2,90);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,-90,2,60);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,-90,2,30);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,-90,2,0);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,-90,2,-30);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,-90,2,-60);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,-90,2,-90);
		Loop;
	}
}

class GluonPrimaryBurst12 : GluonPrimaryBurst
{
	States
	{
	Spawn:
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,90,2,-30);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,90,2,0);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,90,2,30);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,90,2,60);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,90,2,90);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,-90,2,60);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,-90,2,30);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,-90,2,0);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,-90,2,-30);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,-90,2,-60);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,-90,2,-90);
		LPUF A 1 Bright A_SpawnProjectile("GluonOutsideTrailSpawner",0,0,90,2,-60);
		Loop;
	}
}

//The Gluon "flash", which up close, is deadly to those who get in front of the gun.

class GluonFire : Actor
{
	Default
	{
		Speed 20;
		DamageFunction (1);
		Radius 1;
		Height 1;
		Projectile;
		+RIPPER
	//	RipperLevel 2
		+DONTREFLECT
		+EXTREMEDEATH
		DamageType "PlasmaDisint";
	}
	States
	{
	Spawn:
		TNT1 A 1;
		Stop;
	}
}

class GluonFire2 : GluonFire
{
	States
	{
	Spawn:
		TNT1 A 2;
		Stop;
	}
}

class GluonFire3 : GluonFire
{
	States
	{
	Spawn:
		TNT1 A 3;
		Stop;
	}
}

class GluonFire4 : GluonFire{Default{Speed 30;}}

class GluonFire5 : GluonFire2{Default{Speed 30;}}


class GluonTrail : Actor
{
	Default
	{
		Scale 1.15;
		Projectile;
		+NOINTERACTION
		RenderStyle "Add";
		Alpha .45;
	}
	States
	{
	Spawn:
		LPUF ABCDE 2;
		Stop;
	}
}

class GluonExplosion : GluonTrail
{
	Default
	{
		Scale 1.15;
		Projectile;
		+NOCLIP
		+EXTREMEDEATH
		+FORCERADIUSDMG
		RenderStyle "Add";
		DamageType "PlasmaDisint";
		Alpha .45;
	}
	States
	{
	Spawn:
		LPUF A 0 NODELAY A_Explode(10,75,0);
		Stop;
	}
}

class GluonOutsideTrailSpawner : Actor
{
	Default
	{
		+NOINTERACTION
	}
	States
	{
	Spawn:
		TNT1 A 1;
		TNT1 A 0 A_SpawnProjectile("GluonTrail",0);
		Stop;
	}
}


class GluonTrailSmall : GluonTrail{Default{Scale .95;}}

class RipperEffect : Actor
{
	Default
	{
		Projectile;
		+RIPPER
	//	RipperLevel 2
		+EXTREMEDEATH
		+DONTREFLECT
		+PAINLESS
		Speed 1;
		Damage 1;
		Radius 1;
		Height 1;
		DamageType "PlasmaDisint";
	}
	States
	{
	Spawn:
		TNT1 A 1;
		Stop;
	}
}

//***************************************************************

class AECell : Ammo
{
	Default
	{
		+FLOORCLIP
		radius 8;
		height 8;
		inventory.pickupmessage "Picked up depleted U-235.";
		inventory.amount 20;
		inventory.maxamount 100;
		inventory.pickupsound "misc/w_pkup";
		ammo.backpackamount 20;
		Scale 0.75;
		inventory.icon "i_bul1";	//Change when proper icon is inserted into file
	}
	states
	{
	Spawn:
		POSS A -1;
		Loop;
	}
}

//****
// Hornet Gun (aka HiveHand)
//****

class HornetGun : ParanoidWeapon
{
	Default
	{
		+FLOORCLIP
		+WEAPON.CHEATNOTWEAPON
		+WEAPON.AMMO_OPTIONAL
		+WEAPON.ALT_AMMO_OPTIONAL
		+INVENTORY.IGNORESKILL
		Weapon.AmmoType1 "HLHornet";
		Weapon.AmmoType2 "HLHornet";
		Weapon.AmmoGive1 10;
		Weapon.AmmoUse1 1;
		Weapon.AmmoUse2 1;
		Inventory.PickupMessage "You swiped an alien hornet gun!";
		Inventory.PickupSound "reilsss/weapons/demoncalleridlebio";
		weapon.upsound "weapons/draw";
		Scale 0.095;
		Tag "HornetGun";
		Inventory.Icon "i_hhand1";
	}
    States
    {
    Ready:
		HNTG BBBBBB 1 A_WeaponReady;
		HNTG B 0 A_JumpIfInventory("HLHornet",10,"Ready");
		HNTG B 0 A_GiveInventory("HLHornet",1);
		Goto Ready;
    Deselect:
		HNTG B 1 A_Lower;
		TNT1 AA 0 A_Lower;
		Loop;
    Select:
		HNTG B 1 A_Raise;
		TNT1 AA 0 A_Raise;
		Loop;
    Fire:
		HNTG B 0 A_JumpIfInventory("HLHornet",1,1);
		Goto Ready;
		HNTG B 0 A_PlaySound("halflife/monsters/hornetgrunt/flysight",CHAN_WEAPON,0.6,0);
		HNTG B 0 A_FireProjectile("HGunHornet",0,1,8,0);
		HNTG CDE 2;
		HNTG B 2;
		HNTG B 0 A_ReFire;
		Goto Ready;
    AltFire:
		HNTG B 0 A_JumpIfInventory("HLHornet",1,1);
		Goto Ready;
		HNTG B 0 A_PlaySound("halflife/monsters/hornetgrunt/flysight",CHAN_WEAPON,0.6,0);
		HNTG B 0 A_FireProjectile("HGunHornet2",0,1,8,0);
		HNTG CDE 1;
		HNTG B 1;
		HNTG B 0 A_ReFire;
		Goto Ready;
		HNTG B 0 A_JumpIfInventory("HLHornet",1,1);
		Goto Ready;
		HNTG B 0 A_PlaySound("halflife/monsters/hornetgrunt/flysight",CHAN_WEAPON,0.6,0);
		HNTG B 0 A_FireProjectile("HGunHornet2",0,1,8,0);
		HNTG EB 1;
		HNTG B 0 A_ReFire;
		Goto Ready;
    Flash:
		TNT1 A 1 A_Light2;
		TNT1 A 1 A_Light1;
		Goto LightDone;
    }
}

class HGunHornet : FastProjectile
{
	Default
	{
		Radius 4;
		Height 4;
		Speed 20;
		Damage 5;
		Scale 0.095;
		+SEEKERMISSILE
		MissileType "HGHornetTrail";
		MissileHeight 8;
	}
	States
    {
    Spawn:
		HLOH B 1 Bright A_SeekerMissile(2,2,1,90,3);
		Loop;
    Death:
    Crash:
		TNT1 A 0 A_SpawnItemEx("HGHornetShooter1");
		TNT1 A 1 A_PlaySound("halflife/monsters/hornetgrunt/flybuzz");
		Stop;
    XDeath:
		TNT1 A 0 A_PlaySound("halflife/monsters/hornetgrunt/flyhit");
		Stop;
    }
}

class HGunHornet2 : HGunHornet
{
	Default
	{
		Speed 10;
		Scale 0.025;
		-SEEKERMISSILE
	}
	States
    {
    Spawn:
		HLOH A 1 Bright A_SeekerMissile(2,2,1,90,3);
		Loop;
    Death:
    Crash:
		TNT1 A 0 A_SpawnItemEx("HGHornetShooter2");
		TNT1 A 1 A_PlaySound("halflife/monsters/hornetgrunt/flybuzz");
		Stop;
    }
}

class HLHornet : Ammo
{
	Default
	{
		Inventory.MaxAmount 10;
		+INVENTORY.IGNORESKILL
		inventory.icon "i_bul1";	//Change when proper icon is inserted into file
	}
}

//****

class HGHornetTrail1 : Actor
{
	Default
	{
		radius 6;
		height 8;
		+NOINTERACTION
		Scale 0.015;
		RenderStyle "Add";
		Alpha 0.5;
		Translation "80:111=192:223";
	}
	states
	{
	Spawn:
		X099 A 1 A_FadeOut (0.03);
		loop;
	}
}

class HGHornetShooter2 : Actor
{
	Default
	{
		+FRIENDLY
		MONSTER;
		Radius 1;
		Height 1;
		+NOGRAVITY
		+NOCLIP
		+LOOKALLAROUND
		+MISSILEMORE
		+MISSILEEVENMORE
		-SOLID
		-SHOOTABLE
		-COUNTKILL
		MinMissileChance 0;
		ReactionTime 25;
	}
    States
    {
    Spawn:
		TNT1 A 0 A_CountDown;
        PLAY A 1 A_Look;
    See:
		PLAY A 0 A_Chase;
	Missile:
		TNT1 A 0 A_JumpIfCloser(128,"SuccessfulChase");
		TNT1 A 0 A_Jump(128,"NinetyNeg1");
		PLAY A 0 A_SpawnItemEx("HGruntHornetFake1",0,0,0,10,0,random(2,-2),90);
		Stop;
    NinetyNeg1:
		PLAY A 0 A_SpawnItemEx("HGruntHornetFake1",0,0,0,10,0,random(5,-5),-90);
		Stop;
    SuccessfulChase:
		PLAY A 0 A_FaceTarget;
		PLAY A 0 A_SpawnProjectile("HGruntHornetNoSightSound",0);
		Stop;
    }
}

class HGruntHornet : Actor
{
	Default
	{
		Radius 8;
		Height 12;
		Projectile;
		Speed 17;
		Damage 4;
		Scale .085;
		DamageType "Hornet";
		+SEEKERMISSILE;
		SeeSound "halflife/monsters/hornetgrunt/flysight";
	}
	States
	{
	Spawn:
		HLOH B 1 NODELAY A_SeekerMissile(2,2);
		X099 A 0 A_SpawnItemEx("HGHornetTrail",-2);
		Loop;
	Death:
	Crash:
		TNT1 A 0 A_SpawnItemEx("HGHornetShooter1");
		TNT1 A 1 A_PlaySound("halflife/monsters/hornetgrunt/flybuzz");
		Stop;
	XDeath:
		TNT1 A 0 A_PlaySound("halflife/monsters/hornetgrunt/flyhit");
		Stop;
	}
}

class HGHornetTrail : Actor
{
	Default
	{
		radius 6;
		height 8;
		+NOINTERACTION
		Scale .015;
		RenderStyle "Add";
		Translation "80:111=160:167";
	}
	states
	{
	Spawn:
		X099 A 1 A_FadeOut(.03);
		Loop;
	}
}

class HGHornetShooter1 : Actor
{
	Default
	{
		+FRIENDLY
		MONSTER;
		Radius 1;
		Height 1;
		+NOGRAVITY
		+NOCLIP
		+LOOKALLAROUND
		+MISSILEMORE
		+MISSILEEVENMORE
		-SOLID
		-SHOOTABLE
		-COUNTKILL
		MinMissileChance 0;
		ReactionTime 25;
	}
	States
	{
	Spawn:
		TNT1 A 0 A_CountDown;
		TNT1 A 1 A_Look;
	See:
		TNT1 A 0 A_Chase;
	Missile:
		TNT1 A 0 A_JumpIfCloser(128,"SuccessfulChase");
		TNT1 A 0 A_Jump(128,"NinetyNeg");
		TNT1 A 0 A_SpawnItemEx("HGruntHornetFake",0,0,0,10,0,random(2,-2),90);
		Stop;
	NinetyNeg:
		TNT1 A 0 A_SpawnItemEx("HGruntHornetFake",0,0,0,10,0,random(5,-5),-90);
		Stop;
	SuccessfulChase:
		TNT1 A 0 A_FaceTarget;
		TNT1 A 0 A_SpawnProjectile("HGruntHornetNoSightSound",0);
		Stop;
	}
}

class HGruntHornetNoSightSound : HGruntHornet
{
	Default
	{
		SeeSound "";
	}
	States
	{
	Death:
	Crash:
		TNT1 A 1 A_PlaySound("halflife/monsters/hornetgrunt/flybuzz");
		Stop;
	XDeath:
		TNT1 A 0 A_PlaySound("halflife/monsters/hornetgrunt/flyhit");
		Stop;
	}
}

class HGruntHornetFake : HGruntHornet
{
	int hornetcounter;
	Default
	{
		SeeSound "";
	}
	States
	{
	Spawn:
		HLOH B 1 NODELAY A_JumpIf(hornetcounter>=20,"Death");
		TNT1 A 0
		{
			hornetcounter++;
			A_SpawnItemEx("HGHornetTrail",-2);
		}
		Loop;
	Death:
		TNT1 A 1 A_PlaySound("halflife/monsters/hornetgrunt/flybuzz");
		Stop;
	}
}

class HGruntHornetFake1 : HGruntHornetFake
{
	States
	{
	Spawn:
		HLOH A 1 NODELAY A_JumpIf(hornetcounter>=20,"Death");
		TNT1 A 0
		{
			hornetcounter++;
			A_SpawnItemEx("HGHornetTrail1",-2);
		}
		Loop;
	}
}

//============
// Ammo Pack
//============

class AmmoPack : CustomInventory
{
	Default
	{
		Radius 6;
		Height 24;
		Inventory.PickupSound "misc/w_pkup";
		Inventory.PickupMessage "Picked up an AmmoPack!";
		+FLOORCLIP
	}
	States
	{
	Pickup:
		TNT1 A 0 A_GiveInventory("BClip",17);
		TNT1 A 0 A_GiveInventory("ARClip",25);
		TNT1 A 0 A_GiveInventory("PShell",4);
		TNT1 A 0 A_GiveInventory("PythonAmmo",6);
		TNT1 A 0 A_GiveInventory("RPGAmmo");
		TNT1 A 0 A_GiveInventory("Xbowbolts",2);
 		TNT1 A 0 A_GiveInventory("AECell",10);
		Stop;
	}
}